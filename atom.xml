<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Heitor&#x27;s log</title>
    <subtitle>My corner of the web.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://heitorpb.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://heitorpb.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-01T00:00:00+00:00</updated>
    <id>https://heitorpb.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Finding out your public IP address via curl</title>
        <published>2023-09-01T00:00:00+00:00</published>
        <updated>2023-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/ip-rs/"/>
        <id>https://heitorpb.github.io/bla/ip-rs/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/ip-rs/">&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; data-header=&quot;false&quot; data-footer=&quot;false&quot; href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;46026710405&#x2F;&quot; title=&quot;Road to the Bastille&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;live.staticflickr.com&#x2F;4833&#x2F;46026710405_8c361ae6bc_c.jpg&quot; width=&quot;800&quot; height=&quot;532&quot; alt=&quot;Road to the Bastille&quot;&#x2F;&gt;&lt;&#x2F;a&gt;&lt;script async src=&quot;&#x2F;&#x2F;embedr.flickr.com&#x2F;assets&#x2F;client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes all we want is to figure out our public IP address. Sometimes life is
just that simple: grab the IP and move on. But when you are in a sea of servers
after navigating through a maze of SSH tunnels, where are you? What server is
this?&lt;&#x2F;p&gt;
&lt;p&gt;Sure, you can &lt;em&gt;just open the browser&lt;&#x2F;em&gt;, go to the AWS console, search for that
particular instance (probably takes two or three attempts until getting the
correct instance name, assuming you know the right region to search for), and
then figure out it only has internal addresses…&lt;&#x2F;p&gt;
&lt;p&gt;I’m too lazy to go that route again. So I made a little web server to answer
that question for me: &lt;a href=&quot;https:&#x2F;&#x2F;iprs.fly.dev&quot;&gt;&lt;code&gt;iprs.fly.dev&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Usage is straightforward: make a GET request to my hosted server at
&lt;a href=&quot;https:&#x2F;&#x2F;iprs.fly.dev&quot;&gt;&lt;code&gt;iprs.fly.dev&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. For example, using &lt;code&gt;curl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;$ curl -L iprs.fly.dev
&lt;&#x2F;span&gt;&lt;span&gt;2804:431:c00f:feee:bee:2572:573d:c00f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;😎&lt;&#x2F;p&gt;
&lt;p&gt;And if you &lt;del&gt;still care about&lt;&#x2F;del&gt; want your IPv4 instead, you can also check it
out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ curl -L -4 iprs.fly.dev
&lt;&#x2F;span&gt;&lt;span&gt;200.232.29.121
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Way easier and faster than navigating the cloud provider’s console :)&lt;&#x2F;p&gt;
&lt;p&gt;You can always force &lt;code&gt;curl&lt;&#x2F;code&gt; to use a specific IP version with &lt;code&gt;-4&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;--ipv4&lt;&#x2F;code&gt; or
&lt;code&gt;-6&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;--ipv6&lt;&#x2F;code&gt;. Whether your connection uses IPv4 or IPv6 by default depends on
your local network setup and ISP, you might not even have IPv6.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this project is available at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;heitorPB&#x2F;ip.rs&quot;&gt;GitHub:heitorPB&#x2F;ip.rs&lt;&#x2F;a&gt;. I coded it in Rust,
using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;axum&quot;&gt;Axum&lt;&#x2F;a&gt; for the web server, built the
Docker image via Nix and hosted it in a &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;Flying Cloud&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And this is totally reinventing the wheel. There are plenty of other services
online that also show your IP. And now there’s one more
&lt;abbr title=&quot;Mandatory xkcd: xkcd.com&#x2F;927&#x2F;&quot;&gt;🙃&lt;&#x2F;abbr&gt; So, why
make it? For fun, to practice Rust, learn Axum and to have something to blog
about here.&lt;&#x2F;p&gt;
</content>
        
        <category term="curl"/>
        
        <category term="REST"/>
        
        <category term="Rust"/>
        
        <category term="ReinventingThewheel"/>
        
        <category term="networking"/>
        
        <category term="Fly.io"/>
        </entry>
    <entry xml:lang="en">
        <title>Symbolic links in Python are easier</title>
        <published>2023-08-14T00:00:00+00:00</published>
        <updated>2023-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/symbolic-links-in-python-are-easier/"/>
        <id>https://heitorpb.github.io/bla/symbolic-links-in-python-are-easier/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/symbolic-links-in-python-are-easier/">&lt;p&gt;Every now and then we need to create symbolic links, or &lt;abbr
title=&quot;or soft links&quot;&gt;&lt;em&gt;symlinks&lt;&#x2F;em&gt;&lt;&#x2F;abbr&gt; for the intimate. This way we can have
a link, or pointer, to another file: the link looks like a regular file (or
directory) but refers to a file (or directory) in another place (assuming the
link is not broken, of course).&lt;&#x2F;p&gt;
&lt;p&gt;We usually open the terminal and &lt;code&gt;ln -s foo bar&lt;&#x2F;code&gt; around to create these links.
This command creates a symbolic link (hence the &lt;code&gt;-s&lt;&#x2F;code&gt; flag) named &lt;code&gt;bar&lt;&#x2F;code&gt; that
points to the file &lt;code&gt;foo&lt;&#x2F;code&gt;. Or is it the other way around: a link named &lt;code&gt;foo&lt;&#x2F;code&gt;
pointing to &lt;code&gt;bar&lt;&#x2F;code&gt;? Damn it. I’ve done this a million times, what’s the order
again?&lt;&#x2F;p&gt;
&lt;p&gt;Every time I create a symlink I need to stop for a moment and remember the
mantra: &lt;code&gt;ln &amp;lt;target&amp;gt; &amp;lt;link-name&amp;gt;&lt;&#x2F;code&gt;. And then I get it wrong 42.137% of the
times, approximately. Yeah, I have the manual right in front of me, some ~100
columns to the side. But still, I flip the arguments… my brain is weird, what
can I do?&lt;&#x2F;p&gt;
&lt;p&gt;Well, I can open a Python interpreter.&lt;&#x2F;p&gt;
&lt;p&gt;Python has an amazing module to work with filesystem paths called
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;pathlib.html&quot;&gt;Pathlib&lt;&#x2F;a&gt;, since Python 3.4.
This module allows you to create &lt;code&gt;Path&lt;&#x2F;code&gt; objects and with a &lt;code&gt;Path&lt;&#x2F;code&gt; object you
can do file operations like: create&#x2F;delete a file&#x2F;directory, check if it is a
directory&#x2F;block device&#x2F;socket, list contents of a path, change file permissions
like &lt;code&gt;chmod&lt;&#x2F;code&gt;, and many other really cool stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Among those other really cool stuff is: create a &lt;code&gt;Path&lt;&#x2F;code&gt; and turn it into a real
symbolic link! Like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pathlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Path
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&#x2F;my_link_to_fstab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;symlink_to&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And voilà! Mind blowing, isn’t it? We now have a new symbolic link at
&lt;code&gt;&#x2F;tmp&#x2F;my_link_to_fstab&lt;&#x2F;code&gt; that points to &lt;code&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; file &#x2F;tmp&#x2F;my_link_to_fstab
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;tmp&#x2F;my_link_to_fstab:&lt;&#x2F;span&gt;&lt;span&gt; symbolic link to &#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is way easier to remember: create a &lt;code&gt;Path&lt;&#x2F;code&gt; representing where you want the
link to exist and then write where to point it to. There’s no need anymore to
think about the order of &lt;code&gt;ln&lt;&#x2F;code&gt; arguments.&lt;&#x2F;p&gt;
&lt;p&gt;Python is nice, use it. 🐍&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="python"/>
        
        <category term="sysadmin"/>
        
        <category term="symlink"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>Repairing an RGB LED controller</title>
        <published>2023-08-03T00:00:00+00:00</published>
        <updated>2023-08-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/repairing-led-rgb-controller/"/>
        <id>https://heitorpb.github.io/bla/repairing-led-rgb-controller/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/repairing-led-rgb-controller/">&lt;p&gt;We have a remote controlled LED lighting in our living room. It is an LED strip
glued under the sofa, with a small controller box and a remote control to turn
it on&#x2F;off and control the colors. These effects make our living room cozier and
the visits impressed :)&lt;&#x2F;p&gt;
&lt;p&gt;But a couple of days ago the remote controller stopped working: no more turning
on or off, changing colors or effects. The battery was relatively new and with
enough juice to make the control work.&lt;&#x2F;p&gt;
&lt;p&gt;So I started poking at the electronic box. This is the box:&lt;&#x2F;p&gt;

  &lt;figure class=&quot;center&quot; &gt;
    &lt;img src=&quot;controller-box.jpg&quot; alt=&quot;LED controller box&quot; style=&quot;width: 80%&quot; &#x2F;&gt;
    
      &lt;figcaption class=&quot;center&quot;&gt;&lt;p&gt;The LED controller box has a power connector (not seen), an
IR sensor (the black square on the end of the white cable)
and the LED output power (the colored cable).&lt;&#x2F;p&gt;
&lt;&#x2F;figcaption&gt;
    
  &lt;&#x2F;figure&gt;

&lt;p&gt;Opening the box was harder than I thought. The lid has one of those locking
mechanisms that are not accessible from the outside. A small screwdriver did
the job and almost broke it. With the lid open, I can remove and inspect the
circuit board.&lt;&#x2F;p&gt;
&lt;p&gt;The circuit is quite simple: three transistors, each one driving each LED
color, an unnamed microcontroller, an infrared sensor and a power connector. I
wonder what microcontroller is that, an ATtiny maybe?&lt;&#x2F;p&gt;
&lt;p&gt;The PCB seemed fine to me. I thought the cats would have pulled the sensor and
I’d need to resolder it to the PCB. But it didn’t seem to be the case. The
sensor, on the other hand, did not seem to be on its best days:&lt;&#x2F;p&gt;

  &lt;figure class=&quot;center&quot; &gt;
    &lt;img src=&quot;covered-sensor.jpg&quot; alt=&quot;The IR sensor, connected to the cable and the electrical
               connection covered in plastic for electrical protection. The
               thermoplastic has many bite marks.&quot; style=&quot;width: 80%&quot; &#x2F;&gt;
    
      &lt;figcaption class=&quot;center&quot;&gt;&lt;p&gt;The IR sensor (black thingy), connected to the cable and the
electrical connection covered in thermoplastic for
protection.&lt;&#x2F;p&gt;
&lt;&#x2F;figcaption&gt;
    
  &lt;&#x2F;figure&gt;

&lt;p&gt;There are many marks in the thermoplastic that covers the sensor connection.
Yeah, the cat ate the sensor. Or at least took a few bites. After removing that
weird white cover, the issue appears:&lt;&#x2F;p&gt;

  &lt;figure class=&quot;center&quot; &gt;
    &lt;img src=&quot;broken-solder.jpg&quot; alt=&quot;The IR sensor after removing the thermoplastic, we can see the
               IR sensor has three connections, but only two are soldered. The
               middle connection was bitten away.&quot; style=&quot;width: 80%&quot; &#x2F;&gt;
    
      &lt;figcaption class=&quot;center&quot;&gt;&lt;p&gt;After removing the thermoplastic, we can see the IR sensor
has three connections, but only two are soldered. The middle
connection was bitten away.&lt;&#x2F;p&gt;
&lt;&#x2F;figcaption&gt;
    
  &lt;&#x2F;figure&gt;

&lt;p&gt;One of the solders was broken. Hopefully the sensor still works and the problem
is that broken solder. Well, I have some [rudimentary] soldering skills and a
soldering iron, re-soldering was quick. Time to close it and put back into its
place to test:&lt;&#x2F;p&gt;

  &lt;figure class=&quot;center&quot; &gt;
    &lt;img src=&quot;production-ready.jpg&quot; alt=&quot;LED controller glued under the sofa, connected to power and
               LEDs, with repaired IR sensor visible.&quot; style=&quot;width: 80%&quot; &#x2F;&gt;
    
      &lt;figcaption class=&quot;center&quot;&gt;&lt;p&gt;LED controller deployed &lt;del&gt;to production&lt;&#x2F;del&gt; under the sofa,
connected to power and the repaired IR sensor glued for
cat-proofing, maybe.&lt;&#x2F;p&gt;
&lt;&#x2F;figcaption&gt;
    
  &lt;&#x2F;figure&gt;

&lt;p&gt;Now that everything is in place, it should work, right?&lt;&#x2F;p&gt;
&lt;video width=&quot;100%&quot; height=&quot;100%&quot; loop=&quot;True&quot; controls&gt;
    &lt;source src=&quot;IR-remote.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
    Your browser does not support the HTML5 video tag :(
    click &lt;a href=&quot;IR-remote.mp4&quot;&gt;here&lt;&#x2F;a&gt; to view the remote control changing
    the colors of the LEDs.
&lt;&#x2F;video&gt;&lt;br&gt;
&lt;p&gt;It works! 🎉 What a crappy video…&lt;&#x2F;p&gt;
</content>
        
        <category term="Electronics"/>
        
        <category term="troubleshooting"/>
        
        <category term="DIY"/>
        </entry>
    <entry xml:lang="en">
        <title>Copying files to privileged locations with rsync</title>
        <published>2023-07-16T00:00:00+00:00</published>
        <updated>2023-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/copying-files-to-privileged-locations-with-rsync/"/>
        <id>https://heitorpb.github.io/bla/copying-files-to-privileged-locations-with-rsync/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/copying-files-to-privileged-locations-with-rsync/">&lt;center&gt;
&lt;a data-flickr-embed=&quot;true&quot; data-header=&quot;false&quot; data-footer=&quot;true&quot; href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;53043992196&#x2F;&quot; title=&quot;Baudet et Roire&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;live.staticflickr.com&#x2F;65535&#x2F;53043992196_658f295a38_z.jpg&quot; width=&quot;640&quot; height=&quot;426&quot; alt=&quot;Baudet et Roire&quot;&#x2F;&gt;&lt;&#x2F;a&gt;&lt;script async src=&quot;&#x2F;&#x2F;embedr.flickr.com&#x2F;assets&#x2F;client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I work with many remote servers and eventually I need to copy a file (or a
bunch of them) to a directory that requires administrative privileges. My
normal user does not have permissions for that, but I can get it via &lt;code&gt;sudo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Copying files to other servers is simple and I usually use
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rsync&quot;&gt;&lt;code&gt;rsync&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for that. After copying the
files to a temporary location, I can use &lt;code&gt;ssh&lt;&#x2F;code&gt; to move files around.&lt;&#x2F;p&gt;
&lt;p&gt;If the remote server is set up to not ask for passwords when using &lt;code&gt;sudo&lt;&#x2F;code&gt;, this
task can be done easily:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; scp afile user@host.com:&#x2F;tmp&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh user@host.com sudo mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;afile &#x2F;etc&#x2F;default&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;renamed &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&#x2F;afile&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; -&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;default&#x2F;afile&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;scp&lt;&#x2F;code&gt; command copies a file to a temporary directory on the remote server
and then we execute &lt;code&gt;sudo mv -v &#x2F;tmp&#x2F;afile &#x2F;etc&#x2F;default&#x2F;&lt;&#x2F;code&gt; via &lt;code&gt;ssh&lt;&#x2F;code&gt; on the
server to move the file to the final destination.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I used &lt;code&gt;scp&lt;&#x2F;code&gt; in this example as it is simpler to type, but &lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;835962&#x2F;&quot;&gt;scp was
deprecated&lt;&#x2F;a&gt;. I use &lt;code&gt;rsync&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I really like the &lt;code&gt;-v&lt;&#x2F;code&gt; flag for &lt;code&gt;mv&lt;&#x2F;code&gt; in this command, it serves as a
confirmation that the file was indeed copied. &lt;code&gt;-v&lt;&#x2F;code&gt; is short for &lt;code&gt;--verbose&lt;&#x2F;code&gt;
and, when used, &lt;code&gt;mv&lt;&#x2F;code&gt; tells you what file is being moved.&lt;&#x2F;p&gt;
&lt;p&gt;But this approach requires typing two commands, while we could use only one
&lt;code&gt;rsync&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avzP --rsync-path&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sudo rsync&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; afile user@host.com:&#x2F;etc&#x2F;default&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sending&lt;&#x2F;span&gt;&lt;span&gt; incremental file list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afile
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; 100%    0.00kB&#x2F;s    0:00:00 (xfr#1, to-chk=0&#x2F;1)
&lt;&#x2F;span&gt;&lt;span&gt;                                                                          
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sent&lt;&#x2F;span&gt;&lt;span&gt; 107 bytes  received 35 bytes  31.56 bytes&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt; size is 3  speedup is 0.02
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The magic words here are &lt;code&gt;--rsync-path=&amp;quot;sudo rsync&amp;quot;&lt;&#x2F;code&gt;. This flag specifies the
path for the &lt;code&gt;rsync&lt;&#x2F;code&gt; executable on the remote machine. By using &lt;code&gt;sudo rsync&lt;&#x2F;code&gt;
remotely, we can access the directory we want!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, this approach also requires the remote user to be able to &lt;code&gt;sudo&lt;&#x2F;code&gt;
without typing the password.&lt;&#x2F;p&gt;
&lt;p&gt;The other command line flags are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;&#x2F;code&gt; (short for &lt;code&gt;--archive&lt;&#x2F;code&gt;): does quite a lot, but in summary is to be
recursive and preserve almost all file attributes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;&#x2F;code&gt; (short for &lt;code&gt;--verbose&lt;&#x2F;code&gt;): to see what is going on with more details.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;&#x2F;code&gt; (short for &lt;code&gt;--compress&lt;&#x2F;code&gt;): to compress the data when transferring files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;&#x2F;code&gt; (short for &lt;code&gt;--partial --progress&lt;&#x2F;code&gt;): to show transfer progress and keep
partial files in case of connection loss.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;--rsync-path=&amp;quot;sudo rsync&amp;quot;&lt;&#x2F;code&gt; is the magical flag to be &lt;code&gt;sudo&lt;&#x2F;code&gt; on a remote
machine, when the server is configured with passwordless &lt;code&gt;sudo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="rsync"/>
        
        <category term="TIL"/>
        
        <category term="sysadmin"/>
        </entry>
    <entry xml:lang="en">
        <title>ip route add blackhole</title>
        <published>2023-05-25T00:00:00+00:00</published>
        <updated>2023-05-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/ip-route-add-blackhole/"/>
        <id>https://heitorpb.github.io/bla/ip-route-add-blackhole/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/ip-route-add-blackhole/">&lt;p&gt;Today I found out you can have your own local black hole. And it can eat away
all your network packets, so be careful with that.&lt;&#x2F;p&gt;
&lt;p&gt;To create a black hole, we need to add a new entry to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Routing_table&quot;&gt;routing
table&lt;&#x2F;a&gt;. On modern Linux
distributions, this is done with the &lt;code&gt;iproute2&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo ip route add blackhole 10.0.0.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let me tell you a joke: 3 ICMP packets entered a &lt;del&gt;bar&lt;&#x2F;del&gt; black hole:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; 3 10.0.0.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ping:&lt;&#x2F;span&gt;&lt;span&gt; connect: Invalid argument
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ssh&lt;&#x2F;code&gt; also shows some interesting messages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh 10.0.0.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh:&lt;&#x2F;span&gt;&lt;span&gt; connect to host 10.0.0.1 port 22: Invalid argument
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we try any address that is far away from the black hole’s event horizon:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh 10.0.10.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh:&lt;&#x2F;span&gt;&lt;span&gt; connect to host 10.0.10.1 port 22: Connection timed out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; 3 10.0.10.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PING&lt;&#x2F;span&gt;&lt;span&gt; 10.0.10.1 (10.0.10.1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt;(84) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt; of data.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span&gt; 10.0.10.1 ping statistics ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; packets transmitted, 0 received, 100% packet loss, time 2043ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;According to the &lt;code&gt;ip-route(8)&lt;&#x2F;code&gt; manual, black hole routes are unreachable and
the requesters get an &lt;code&gt;EINVAL&lt;&#x2F;code&gt; (error, invalid) error. There are other two
types of routes that block connection: &lt;code&gt;unreachable&lt;&#x2F;code&gt; and &lt;code&gt;prohibit&lt;&#x2F;code&gt;. But those
don’t sound as cool as black hole 😎&lt;&#x2F;p&gt;
&lt;p&gt;Black holes are useful to deny connections to some IP addresses, similar to
what firewalls do.&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="sysadmin"/>
        
        <category term="networking"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>My website v5: rewrite in Rust</title>
        <published>2023-04-25T00:00:00+00:00</published>
        <updated>2023-04-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/rewriting-in-rust/"/>
        <id>https://heitorpb.github.io/bla/rewriting-in-rust/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/rewriting-in-rust/">&lt;p&gt;So I decided to rewrite my website. Again. This time because the previous
version kind of died: I’m struggling to run Jekyll to build a new version and
some of the assets I used via a CDN moved to a new path. So I decided to
rewrite it. &lt;del&gt;In Rust of course, to follow the trend&lt;&#x2F;del&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-bit-of-history&quot;&gt;A bit of history&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve been building websites for me since my childhood, a looooong time ago.
But, unfortunately, I did not keep the original files, nor even screenshots. I
also did not keep a log of them either. I’m not sure when I had my first
website online :&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;I made my first website in Adobe Flash. Back in the 2000s that was what the
cool kids used. Of course there was an HTML file, but only to display the SWF.
I remember some rotating spheres in the right upper corner, simulating a 3D
effect. I also made some [bad] platform games to download. This was hosted for
free on some host&#x2F;provider I don’t recall and I also had a childish &lt;code&gt;.go.there&lt;&#x2F;code&gt;
domain (yeah, I was a kid). And no HTTPS, this was ~two decades ago. I don’t
have an exact time in mind, but it was around \( 2006 \pm 1 \).&lt;&#x2F;p&gt;
&lt;p&gt;The second version was a combination of Flash &lt;em&gt;and&lt;&#x2F;em&gt; custom HTML. I remember
using Macromedia (!) Dreamweaver to make &lt;em&gt;multiple pages&lt;&#x2F;em&gt;. What a progress!
This time I used a different host, also for free. I have an e-mail from April
11th 2008 when I signed up for FreeWebs.com to host this version. It went live
on that date and lasted until the next iteration.&lt;&#x2F;p&gt;
&lt;p&gt;The third version was a Wordpress on Blogger&#x2F;Blogspot. Also for free. Way less
cool stuff, like the animated rotating spheres from the first version. But this
time it was not static! It had an admin page, a content editor and people could
comment on my glorious posts. All of that made possible by Wordpress.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20220720184059&#x2F;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;&quot;&gt;fourth
version&lt;&#x2F;a&gt;
went live on September 8th, 2018. I decided to fall back to a static website,
hosted for free on GitHub Pages. I built this version using
&lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&quot;&gt;Jekyll&lt;&#x2F;a&gt;. All the HTML and CSS were hand made by me :)
This is the version I am retiring now and looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;rewriting-in-rust&#x2F;v4-home.png&quot; alt=&quot;&quot; title=&quot;Home page of my previous personal website.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-version&quot;&gt;The new version&lt;&#x2F;h2&gt;
&lt;p&gt;For my newer website, I wanted something that could last longer. I don’t want
to go through all the hassle of searching for a new tool or platform, migrating
all the pages, making sure images&#x2F;links&#x2F;formatting are correct, fixing links to
external resources, writing&#x2F;modifying website themes to suit my taste, etc, all
over again.&lt;&#x2F;p&gt;
&lt;p&gt;I also want my pages to load fast, have as minimum of JavaScript as possible,
display correctly on most browsers and devices, be easy to add new content,
and, of course, look good.&lt;&#x2F;p&gt;
&lt;p&gt;With these requirements in mind, I decided to go with
&lt;a href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;: an open-source static website generator. Zola is
simple enough to set up, doesn’t suffer from feature creep, has an active forum
to ask for help, with an active and welcoming community, has many themes
published, is actively maintained, is super fast and is written in Rust 🦀&lt;&#x2F;p&gt;
&lt;p&gt;Zola alone does not solve all my problems. I learned from my mistakes and past
experiences, so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I wrote how to get Zola, the version I am using and the commands to
update&#x2F;add&#x2F;publish new content. Of course, most steps are in a script that I
run. I am too lazy to type stuff all the time.&lt;&#x2F;li&gt;
&lt;li&gt;As with the previous version, I generate my own HTMLs and keep them in a
repository that I control. I could use a CI&#x2F;CD system here, for the sake of
“automation”. But I prefer to run &lt;code&gt;zola build&lt;&#x2F;code&gt; myself, double check the
resulting HTML files and only then &lt;code&gt;git add &amp;amp;&amp;amp; git push&lt;&#x2F;code&gt;. This is not hard
and adds some peace of mind over mistakes.&lt;&#x2F;li&gt;
&lt;li&gt;Choose a theme that contains no external resources, pretty much all styling
is self contained. And no JavaScript!
&lt;ul&gt;
&lt;li&gt;I chose &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pawroman&#x2F;zola-theme-terminimal&quot;&gt;Terminimal&lt;&#x2F;a&gt;
theme. Not bare bones though, I made a few modifications here and there
to suit my taste.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;I like equations and I am not aware of a way to use \( \LaTeX \) without
JavaScript. So I added &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render my precious
maths. Having &lt;em&gt;some&lt;&#x2F;em&gt; JavaScript because it is useful, not because it is a
trending buzzword in some online social network, doesn’t hurt (much).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All of that is good. But Zola, like any tool, is not perfect. I had a few
challenges with the migration from Jekyll to Zola:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Zola does not support abbreviations via Markdown&#x2F;CommonMark. I’m talking
about the &lt;code&gt;abbr&lt;&#x2F;code&gt; HTML tag that looks like
&lt;abbr title=&quot;Hello, this is an abbreviation in HTML world&quot;&gt;this&lt;&#x2F;abbr&gt; (hover
your mouse there). I like this functionality, but I had to replace all the
markup I had with HTML tags in my files. Annoying, but doable.&lt;&#x2F;li&gt;
&lt;li&gt;Footnotes work, but are a bit rudimentary: I need to manually create the list
with footnotes and the anchor links do not work. Not sure if this is an issue
with the theme I chose or with Zola itself.&lt;&#x2F;li&gt;
&lt;li&gt;Zola’s internal sorting algorithm is case sensitive. This can be annoying in
some cases. One of them is to sort my tags: &lt;code&gt;C++&lt;&#x2F;code&gt; comes before &lt;code&gt;analysis&lt;&#x2F;code&gt; for
example, when it should be the opposite.&lt;&#x2F;li&gt;
&lt;li&gt;No lazy loading of images. Again, not a critical issue, but lazy loading
images can benefit loading pages on limited internet connections. There might
be downsides from lazy loading, but I am not aware of them. There’s an open
feature request at the time of writing, so it is a question of time until
this arrives :)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Apart from these hiccups, “converting” my website from Jekyll to Zola was
straightforward. After all, it’s all Markdown files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;&#x2F;h2&gt;
&lt;p&gt;What’s next? I have a new website, what do I do with it?&lt;&#x2F;p&gt;
&lt;p&gt;Something ancient on my TODO list is to get a nice domain name. I’m not
creative enough to think of one and my interactions with chatGPT were
“inconclusive”. Having yet another new website can be an excuse to finally get
my own domain?&lt;&#x2F;p&gt;
&lt;p&gt;I want to write more and publish what I write. I have been collecting notes for
a while and could turn some of those into interesting articles. I invested many
evenings into this rewrite, I can’t let this new website collect dust.&lt;&#x2F;p&gt;
&lt;p&gt;I also have many drafts of posts&#x2F;articles I started and never finished. And I
have a &lt;em&gt;“list of ideas to blag about”&lt;&#x2F;em&gt; that only grows. Some of those items
&lt;em&gt;should&lt;&#x2F;em&gt; materialize.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe I will write something soon™️. Or make a new website. What will happen
first?&lt;&#x2F;p&gt;
</content>
        
        <category term="website"/>
        
        <category term="zola"/>
        </entry>
    <entry xml:lang="en">
        <title>I Just Finished my Master&#x27;s in Physics</title>
        <published>2021-03-14T00:00:00+00:00</published>
        <updated>2021-03-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/i-finished-my-masters/"/>
        <id>https://heitorpb.github.io/bla/i-finished-my-masters/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/i-finished-my-masters/">&lt;p&gt;Over the last years, I studied, traveled, worked hard, and I finally got the
title of Master of Science in Physics!&lt;&#x2F;p&gt;
&lt;p&gt;It was not easy. I started in the field of radio-frequency electronics for
Nuclear Magnetic Resonance Spectroscopy. The goal was to build a local
oscillator module from which to synchronize the entire machine: FPGA’s clock,
AD&#x2F;DA clocks, mixers reference, and all other clock sources. Ideally, this
would reduce the overall phase noise of the machine. I had some preliminary
results that were pretty awesome 😎 I used a 10 MHz OCXO to make any
frequency up to a few GHz. This was low power (about ~10 dBm), but enough to
add noises to many labs in the building. I spent months trying to find a
passive filter topology that could get rid of signals 10 MHz away from a center
frequency, with an isolation of at least 100 dB. The result was better than I
expected: we even considered using it as the external reference for the lab’s
oscilloscopes, spectrum analyzer, and network analyzer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;i-finished-my-masters&#x2F;clock-boards.jpg&quot; alt=&quot;&quot; title=&quot;A horrible photo showing four of the five components of the system, connected to a spectrum analyzer and an oscilloscope. I also made a 1:16 power splitter, not in the photo.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I then spent six awesome months at &lt;a href=&quot;https:&#x2F;&#x2F;home.cern&quot;&gt;CERN&lt;&#x2F;a&gt;, working with the
&lt;a href=&quot;https:&#x2F;&#x2F;opendata.cern.ch&#x2F;&quot;&gt;OpenData&lt;&#x2F;a&gt; team! This was totally unexpected, and
mind-blowing. CERN is huge. Way bigger than I thought. And everything in there
happens at extreme scales. My task was to mine “some” datasets and discover
&lt;em&gt;how&lt;&#x2F;em&gt; they were generated. For each dataset, I had to query some systems, read
some files, and write down what were the parameters used to create that
dataset. The only detail that made all that out of the ordinary is the scale:
we are talking about several hundreds of terabytes of data. As of now, there
are about 2500 terabytes (2.5 petabytes) available for public use, and more to
come. This is not something you can parse quickly, and definitely something
you need to be extra careful when reading&#x2F;analyzing&#x2F;downloading.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;a data-flickr-embed=&quot;true&quot; data-header=&quot;false&quot; data-footer=&quot;true&quot; href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;33024132298&#x2F;in&#x2F;album-72157704652716634&#x2F;&quot; title=&quot;The Standard Model of Particle Physics&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;live.staticflickr.com&#x2F;4833&#x2F;33024132298_80174633fc_z.jpg&quot; width=&quot;640&quot; height=&quot;426&quot; alt=&quot;The Standard Model of Particle Physics&quot;&gt;&lt;&#x2F;a&gt;&lt;script async src=&quot;&#x2F;&#x2F;embedr.flickr.com&#x2F;assets&#x2F;client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Then I came back to Brazil, to continue my studies. I still needed to take some
courses to have all the credits needed to finish my Master. About half a year
later I started working as a Python developer at a local company.&lt;&#x2F;p&gt;
&lt;p&gt;And I needed to write my Thesis! For reasons, I started out fresh. New research
topic, new supervisor, new tools, new plans. Full time job and full time
research.&lt;&#x2F;p&gt;
&lt;p&gt;To complicate even more everything: we had the Covid-19 pandemic. And it hit
hard. At work, the company needed to adapt, restructure, and we went full
remote. At the University, the classes were interrupted, laboratories closed,
and eventually the classes restarted online and labs reopened with many
restrictions. My research topic did not require any presence at the University:
I could study and develop my simulations at home, and run them remotely at the
University’s computers. But still, I felt the impact of the restrictions.&lt;&#x2F;p&gt;
&lt;p&gt;I managed to adapt, evolve, and handle life-work-studies in a way that in 2021
I started a new job, as a Senior Python Engineer, and defended my Master’s
Thesis: &lt;code&gt;Search strategies and phase transition in the Random Boolean satisfiability problem&lt;&#x2F;code&gt;! In which I used some tools from &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Statistical_physics&quot;&gt;Statistical
Physics&lt;&#x2F;a&gt; to analyze an
NP-Complete problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;i-finished-my-masters&#x2F;defense-phase-transition.jpeg&quot; alt=&quot;&quot; title=&quot;The Phase Transition of Random Boolean formulas. One of the main points of my thesis was to reproduce this famous result using a different technique. Thanks to my uncle for screenshotting my presentation!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, looking back, I see those years as an epic journey: I visited two
continents, I met and interacted with people from all over the world, I learned
a lot about so many things in diverse topics, I had hands-on experience in
diverse areas. It was a period of immense professional and personal growth.&lt;&#x2F;p&gt;
&lt;p&gt;But I did not do it all alone. I had great people by my side, supporting me,
encouraging me, proud of me. My family always invested in my education, since
my childhood, and supported me in every way they could. My girlfriend, my
friends, and colleagues, were always there with their friendship, company,
last-minute ideas for barbecues and burghers.&lt;&#x2F;p&gt;
&lt;p&gt;And last but not least, my supervisor. He was always available to answer all my
questions, and he was very good at explaining everything I asked. Sometimes his
answer was not what I wanted, but a way for me to think and analyze the
situation and answer the question myself. His enthusiasm, patience, and
charisma were essential to make this work happen.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you.&lt;&#x2F;p&gt;
</content>
        
        <category term="analysis"/>
        
        <category term="Electronics"/>
        
        <category term="Physics"/>
        
        <category term="SAT"/>
        </entry>
    <entry xml:lang="en">
        <title>Juju is Fucking Amazing</title>
        <published>2021-02-16T00:00:00+00:00</published>
        <updated>2021-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/juju-is-fucking-amazing/"/>
        <id>https://heitorpb.github.io/bla/juju-is-fucking-amazing/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/juju-is-fucking-amazing/">&lt;p&gt;I’m working with &lt;a href=&quot;https:&#x2F;&#x2F;juju.is&quot;&gt;juju&lt;&#x2F;a&gt; to manage High Performance Computing clusters. It is an interesting software, but with horrible documentation. And of course, easter eggs are not documented.&lt;&#x2F;p&gt;
&lt;p&gt;After all, that’s why &lt;em&gt;easter eggs&lt;&#x2F;em&gt; have this name: they are secret features.&lt;&#x2F;p&gt;
&lt;p&gt;Last Friday, just a few minutes before ending the week, my boss told me “&lt;em&gt;Do
you know what &lt;code&gt;juju is&lt;&#x2F;code&gt;? Find out how this command works.&lt;&#x2F;em&gt;” At first, I didn’t
get the question. I’ve been working with &lt;code&gt;juju&lt;&#x2F;code&gt; for a few days, I have an idea
of what &lt;em&gt;it is&lt;&#x2F;em&gt;. Instead, I was supposed to type in the terminal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; juju is
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fucking&lt;&#x2F;span&gt;&lt;span&gt; amazing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, &lt;code&gt;juju&lt;&#x2F;code&gt; has a very high self-esteem. Now that I know &lt;em&gt;what &lt;code&gt;juju is&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;, I
need to find out &lt;em&gt;how&lt;&#x2F;em&gt; this command works. Let’s ask for help:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; juju is&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span&gt; juju: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; is not a juju command. See &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;juju --help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Did&lt;&#x2F;span&gt;&lt;span&gt; you mean:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmmm, looks like this command is quite hidden. Time to get the source and look
around:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git clone git@github.com:juju&#x2F;juju.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd juju
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -iRn --exclude-dir&lt;&#x2F;span&gt;&lt;span&gt;=.git fuck
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmmm. The string &lt;code&gt;fuck&lt;&#x2F;code&gt; is not in the repository. So, it is not just “quite
hidden”, they obscured it. I liked the challenge! Where to start searching, and
what to search for? They probably wrote that string in binary, or in something
weirder. There are too many files in this source code to go through everything,
we need another strategy.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start looking for that &lt;code&gt;is not a juju command&lt;&#x2F;code&gt; error-string:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -iRn --exclude-dir&lt;&#x2F;span&gt;&lt;span&gt;=.git &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;is not a juju command&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&#x2F;juju&#x2F;commands&#x2F;repl_test.go:207:ERROR&lt;&#x2F;span&gt;&lt;span&gt; juju: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; is not a juju command. Type &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; to see a list of commands.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&#x2F;juju&#x2F;commands&#x2F;main.go:236:const&lt;&#x2F;span&gt;&lt;span&gt; notFoundCommandMessage = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;juju: &lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt; is not a juju command. %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&#x2F;juju&#x2F;commands&#x2F;plugin_test.go:163:&lt;&#x2F;span&gt;&lt;span&gt;   expectedHelp := `ERROR juju: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; is not a juju command. See &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;juju --help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&#x2F;juju&#x2F;commands&#x2F;plugin_test.go:173:&lt;&#x2F;span&gt;&lt;span&gt;   expectedHelp := `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span&gt; juju: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; is not a juju command. See &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;juju --help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&#x2F;juju&#x2F;commands&#x2F;plugin_test.go:183:&lt;&#x2F;span&gt;&lt;span&gt;   expectedHelp := `ERROR juju: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; is not a juju command. See &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;juju --help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep:&lt;&#x2F;span&gt;&lt;span&gt; testcharms&#x2F;charm-repo&#x2F;series&#x2F;format2&#x2F;hooks&#x2F;symlink: No such file or directory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The file &lt;code&gt;cmd&#x2F;juju&#x2F;commands&#x2F;main.go&lt;&#x2F;code&gt; appears to be an interesting starting
point, after all it is the file that parses the command line arguments! Just in
the beginning, there’s a very suspicious line (78):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;= []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\x96\x8c\x8a\x91\x93\x9a\x9e\x8c\x97\x99\x8a\x9c\x94\x96\x91\x98\xdf\x9e\x92\x9e\x85\x96\x91\x98\xf5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What the hell? Looking for this variable in the file shows something
interesting on lines 126-138:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] ^= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;:])
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ExtractCert&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This variable is XORed with &lt;code&gt;255&lt;&#x2F;code&gt; and the CLI arguments are compared with parts
of it, casted to string. That’s too suspicious. I made a quick C++ code to find
out what that weird byte sequence XORed with &lt;code&gt;255&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x96&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x91&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x93&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x9a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x9e&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x97&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x99&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x9c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x94&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x96&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x91&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x98&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xdf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x9e&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x92&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x9e&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x85&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x96&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x91&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x98&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xf5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt; i: x)
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto&lt;&#x2F;span&gt;&lt;span&gt; i: x)
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; static_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(i^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It starts with some standard libraries, that weird byte sequence written the
C++ way, prints the sequence, prints the sequence XORed with &lt;code&gt;255&lt;&#x2F;code&gt; as a char,
and returns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; g++ weird.cpp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span&gt; 140 138 145 147 154 158 140 151 153 138 156 148 150 145 152 223 158 146 158 133 150 145 152 245
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isunleashfucking&lt;&#x2F;span&gt;&lt;span&gt; amazing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;HA, that’s it! That weird byte sequence is &lt;code&gt;isunleashfucking amazing&lt;&#x2F;code&gt;. Lines
130-133 of the &lt;code&gt;main.go&lt;&#x2F;code&gt; file compare the CLI argument with the first 2 chars
of this string (&lt;code&gt;is&lt;&#x2F;code&gt;) and, if it matches, it prints the chars starting from
index 9 until the end (&lt;code&gt;fucking amazing&lt;&#x2F;code&gt;). Nice!&lt;&#x2F;p&gt;
&lt;p&gt;By XORing with &lt;code&gt;255&lt;&#x2F;code&gt; it is not possible to &lt;code&gt;grep&lt;&#x2F;code&gt; the source for that string,
so it keeps it as a secret.&lt;&#x2F;p&gt;
&lt;p&gt;And there’s more. Lines 134-137 compare the input to &lt;code&gt;x[2:9]&lt;&#x2F;code&gt;: &lt;code&gt;unleash&lt;&#x2F;code&gt;. So
there’s another easter egg!&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;juju-is-fucking-amazing&#x2F;cthulhu.png&quot; alt=&quot;“juju unleash” command prints out Cthulhu ASCII art&quot; title=&quot;Juju unleashes Cthulhu&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;And &lt;em&gt;this&lt;&#x2F;em&gt; was amazing! You can manage HPC clusters and unleash Cthulhu at the
same time!&lt;&#x2F;p&gt;
&lt;p&gt;I like to try to understand &lt;em&gt;how&lt;&#x2F;em&gt; stuff works. We always learn something new
this way. This &lt;em&gt;something&lt;&#x2F;em&gt; can be anything: a cool programming trick, a new
algorithm, a better way to structure our code, and even an easter egg! The sky
is the limit.&lt;&#x2F;p&gt;
&lt;p&gt;Btw, Cthulhu is in the file &lt;code&gt;cmd&#x2F;juju&#x2F;model&#x2F;data.go&lt;&#x2F;code&gt;, XORed with &lt;code&gt;255&lt;&#x2F;code&gt; for
safety.&lt;&#x2F;p&gt;
</content>
        
        <category term="analysis"/>
        
        <category term="Juju"/>
        
        <category term="easter-egg"/>
        
        <category term="golang"/>
        
        <category term="C++"/>
        
        <category term="random"/>
        </entry>
    <entry xml:lang="en">
        <title>std::adjacent_find</title>
        <published>2021-01-03T00:00:00+00:00</published>
        <updated>2021-01-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/std-adjacent-find/"/>
        <id>https://heitorpb.github.io/bla/std-adjacent-find/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/std-adjacent-find/">&lt;p&gt;C++ standard library is insane. There are more data structures and algorithms
and utilities than someone can possible remember. If you need to something,
there’s a good chance that someone already made it. And if someone already made
it, there’s a good chance someone submitted a proposal to add it to the C++
standard library.&lt;&#x2F;p&gt;
&lt;p&gt;Today I want to talk about &lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt;, from the &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;&#x2F;code&gt; library.
It returns an iterator to the first repeated element. So, if you have a list of
numbers &lt;code&gt;{1, 2, 2, 3, 3}&lt;&#x2F;code&gt;, this function would return an iterator to the first
&lt;code&gt;2&lt;&#x2F;code&gt;. Let’s see it in practice:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; it = std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adjacent_find&lt;&#x2F;span&gt;&lt;span&gt;(numbers);
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; *(it+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m using &lt;code&gt;ranges&lt;&#x2F;code&gt; in there, so you need a C++20 compatible compiler. To
compile it with &lt;code&gt;gcc&lt;&#x2F;code&gt;: &lt;code&gt;g++ -Wall -Wextra -std=c++20 adj.cpp&lt;&#x2F;code&gt;. I tested with
&lt;code&gt;g++&lt;&#x2F;code&gt; 10.2.0 and &lt;code&gt;clang++&lt;&#x2F;code&gt; 11.0.0, and both have support for it 😎.
But if you can’t (or don’t want to) use C++20, change the code to
&lt;code&gt;std::adjacent_find(numbers.begin(), numbers.end());&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This code finds the repeated elements and return an iterator to the first one.
It then prints it and the next:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;a.out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we can also hack &lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt; with different &lt;em&gt;predicates&lt;&#x2F;em&gt;, and
change how we compare equality between consecutive elements. The &lt;code&gt;&amp;lt;functional&amp;gt;&lt;&#x2F;code&gt;
header contains some common arithmetic comparison operators, like &lt;em&gt;equal&lt;&#x2F;em&gt;, &lt;em&gt;not
equal&lt;&#x2F;em&gt;, &lt;em&gt;less&lt;&#x2F;em&gt;, &lt;em&gt;less equal&lt;&#x2F;em&gt;, etc. Using the same numbers from before, we can
find the first number that is less or equal the next one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;functional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; it = std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adjacent_find&lt;&#x2F;span&gt;&lt;span&gt;(numbers, std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;less_equal&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; *(it+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code returns &lt;code&gt;1 2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see some more examples. From now on, I’ll omit the headers for brevity.&lt;&#x2F;p&gt;
&lt;p&gt;You want to find the first number that is greater the next one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; it = std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adjacent_find&lt;&#x2F;span&gt;&lt;span&gt;(numbers, std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;greater&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(it != numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; *(it+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Found nothing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code returns &lt;code&gt;Found nothing&lt;&#x2F;code&gt;, because no two consecutive numbers in &lt;code&gt;{1, 2, 2, 3, 3, 4, 5}&lt;&#x2F;code&gt; satisfies \( a &amp;gt; b \). When &lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt; does not
find anything, it returns an iterator to the end of the range.&lt;&#x2F;p&gt;
&lt;p&gt;Now you want to find the first number that does not follow the pattern
\( x_{i+1} = x_i + 1 \):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; it = std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adjacent_find&lt;&#x2F;span&gt;&lt;span&gt;(numbers,
&lt;&#x2F;span&gt;&lt;span&gt;	                                     [](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b){
&lt;&#x2F;span&gt;&lt;span&gt;	                                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a != b - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	                                     });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(it != numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; *(it+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Found nothing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This returns, as expected, &lt;code&gt;2 2&lt;&#x2F;code&gt;. This happens because &lt;code&gt;2 != 2-1&lt;&#x2F;code&gt;, so the
lambda returns &lt;code&gt;true&lt;&#x2F;code&gt; and the function returns the iterator to this number. By
&lt;em&gt;this number&lt;&#x2F;em&gt; I mean, &lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt; loops over the objects and compares
&lt;em&gt;this&lt;&#x2F;em&gt; object with the &lt;em&gt;next&lt;&#x2F;em&gt; one. If the sequence was &lt;code&gt;{1, 2, 3, 4, 5}&lt;&#x2F;code&gt;,
&lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt; would return an iterator to the element after the last one
in there, that is, &lt;code&gt;numbers.end())&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Can you find the first pair &lt;code&gt;(a, b)&lt;&#x2F;code&gt; of numbers such that
\(0.78 &amp;lt; a&#x2F;b &amp;lt; 1 \)? Of course you can:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; it = std::ranges::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;adjacent_find&lt;&#x2F;span&gt;&lt;span&gt;(numbers,
&lt;&#x2F;span&gt;&lt;span&gt;	                                     [](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; b) {
&lt;&#x2F;span&gt;&lt;span&gt;	                                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.78 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; a&#x2F;b) &amp;amp;&amp;amp; (a&#x2F;b &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	                                     });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(it != numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; *(it+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		std::cout &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Found nothing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code returns &lt;code&gt;4 5&lt;&#x2F;code&gt;, because \(0.78 &amp;lt; 4&#x2F;5 = 0.8 &amp;lt; 1\).&lt;&#x2F;p&gt;
&lt;p&gt;What I like about this function is that it gives to you an iterator to the
first object matching &lt;em&gt;any rule&lt;&#x2F;em&gt;. If have a vector&#x2F;list&#x2F;range of objects, and
you need to find the first one that has some relation to the next,
&lt;code&gt;std::adjacent_find&lt;&#x2F;code&gt; is the way to go.&lt;&#x2F;p&gt;
</content>
        
        <category term="algorithm"/>
        
        <category term="C++"/>
        </entry>
    <entry xml:lang="en">
        <title>My thoughts on PiHole</title>
        <published>2020-11-10T00:00:00+00:00</published>
        <updated>2020-11-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/pihole-dnsmasq/"/>
        <id>https://heitorpb.github.io/bla/pihole-dnsmasq/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/pihole-dnsmasq/">&lt;p&gt;About a month ago, I decided to try &lt;a href=&quot;https:&#x2F;&#x2F;pi-hole.net&#x2F;&quot;&gt;PiHole&lt;&#x2F;a&gt; for whole
network advertisement blocking, I documented how I set it up
&lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;rasp3-pihole&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;, and now its time to document my thoughts
about using it.&lt;&#x2F;p&gt;
&lt;p&gt;I expected PiHole to block advertisement and trackers on every device connected
to my local network, either through WiFi or cable, in a completely transparent
way. And it does block. The problem is that it is not possible to bypass (or
turn it off) temporarily for a specific website in a specific device. It is
only possible to completely turn off PiHole, for the entire network, either for
the next minutes or indefinitely.&lt;&#x2F;p&gt;
&lt;p&gt;This was a problem for me in two situations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A guest trying to check the prices of a product using my WiFi. It is very
convenient to just Google the product and go to the &lt;em&gt;shopping&lt;&#x2F;em&gt; tab. It shows
the prices different sellers&#x2F;shops in one page, at the price of tracking
you. With PiHole, Google Shopping was blocked. This is just an example, but
the point is: guests get annoyed with the internet blocking their websites.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes a website, or part of its content, is blocked and I wanted to
“debug” it, to find the reason that a particular content is blocked.  It is
very complicated to debug it on a network level, specially after adding some
extra lists of trackers. It is possible to allow a specific domain, but not
everything from a specific web page, in this case you need to do it manually
for every entry you find.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Another inconvenience I found was in the response time. It was taking too long
to start loading new websites. I did not measure the latency, but it was there
and was annoying. It was specially horrible in my phone, it took seconds to
start loading. Too long to be useful.&lt;&#x2F;p&gt;
&lt;p&gt;So I returned to my previous solution:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;a href=&quot;http:&#x2F;&#x2F;www.thekelleys.org.uk&#x2F;dnsmasq&#x2F;doc.html&quot;&gt;&lt;code&gt;dnsmasq&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to cache DNS
queries&lt;&#x2F;li&gt;
&lt;li&gt;use &lt;a href=&quot;https:&#x2F;&#x2F;ublockorigin.com&#x2F;&quot;&gt;uBLock Origin&lt;&#x2F;a&gt; to block ads and trackers,
also available for mobile browsers&lt;&#x2F;li&gt;
&lt;li&gt;do not install crapware in your phone&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Latency is significantly lower, easy to debug, easy to disable blocking in a
single browser tab, and there’s no need to maintain a server.&lt;&#x2F;p&gt;
&lt;p&gt;Now I need to find another use for my Raspberry…&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="networking"/>
        
        <category term="PiHole"/>
        
        <category term="Raspberry Pi"/>
        
        <category term="sysadmin"/>
        </entry>
    <entry xml:lang="en">
        <title>Linux Upskill Challenge</title>
        <published>2020-10-30T00:00:00+00:00</published>
        <updated>2020-10-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/linuxupskill/"/>
        <id>https://heitorpb.github.io/bla/linuxupskill/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/linuxupskill/">&lt;p&gt;The Linux Upskill Challenge is a month-long course on Reddit (&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;linuxupskillchallenge&quot;&gt;r&#x2F;linuxupskillchallenge&lt;&#x2F;a&gt;), about Linux Server Administration.&lt;&#x2F;p&gt;
&lt;p&gt;It is not a formal course, neither gives a certificate to share on social
media. I think this makes the course more valuable, because the people taking
it are doing to learn, and not to brag online.&lt;&#x2F;p&gt;
&lt;p&gt;It is a hands-on course with a lot of extra resources for the curious. Although
I’ve been using GNU&#x2F;Linux in my personal computer for a long time, I don’t
consider myself an expert. I know my way around, but I’ve never dug deeper.
This is a nice opportunity to learn more and also use a remote
&lt;abbr title=&quot;Virtual Private Server&quot;&gt;VPS&lt;&#x2F;abbr&gt; for free. 😎&lt;&#x2F;p&gt;
&lt;h2 id=&quot;daily-logs&quot;&gt;Daily logs&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some thoughts about each lecture. It is not meant to be a collection of
study notes, as use a different system for that, but a brain dump of random
ideas.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;days-0-and-1&quot;&gt;Days 0 and 1&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: get a remote server for free and learn how to manage it.&lt;&#x2F;p&gt;
&lt;p&gt;Decided to use Google Cloud Compute, just because. That dashboard is so
chaotic… The most difficult task of the day was setting up the SSH public key
to log to my new &lt;abbr title=&quot;Virtual Machine&quot;&gt;VM&lt;&#x2F;abbr&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;SSH keys are awesome. I’ve been using them for a long time for remote access
and they make life way easier. &lt;code&gt;ssh-copy-id&lt;&#x2F;code&gt; command is easier than
&lt;code&gt;cat ~&#x2F;.ssh&#x2F;id_rsa.pub | ssh remote_username@server_ip_address &amp;quot;mkdir -p ~&#x2F;.ssh &amp;amp;&amp;amp; chmod 700 ~&#x2F;.ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~&#x2F;.ssh&#x2F;authorized_keys &amp;amp;&amp;amp; chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys&amp;quot;&lt;&#x2F;code&gt;,
but for old servers is not an option. The machine I’m using at my university to
run the simulations for my Master’s studies did not accept &lt;code&gt;ssh-copy-id&lt;&#x2F;code&gt;…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-2&quot;&gt;Day 2&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: learn to navigate in the machine using only the terminal.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been using GNU&#x2F;Linux for more than 10 years, I’m pretty confident with the
terminal. But there’s always something new to learn: &lt;code&gt;ls -ltra&lt;&#x2F;code&gt; is a nice
example to find the most recently altered files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-3&quot;&gt;Day 3&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: get familiar with &lt;code&gt;root&lt;&#x2F;code&gt; things.&lt;&#x2F;p&gt;
&lt;p&gt;Mind blow of the day: I saw lots of attempts to connect to this
&lt;abbr title=&quot;Virtual Machine&quot;&gt;VM&lt;&#x2F;abbr&gt; in &lt;code&gt;&#x2F;var&#x2F;log&#x2F;auth.log&lt;&#x2F;code&gt; file. Awesome.
Bots everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;I am running ArchLinux on my Raspberry Pi 3, it uses &lt;code&gt;journalctl&lt;&#x2F;code&gt; for the logs:
&lt;code&gt;journalctl &#x2F;usr&#x2F;bin&#x2F;sshd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It was nice to learn about &lt;code&gt;sudo -i&lt;&#x2F;code&gt;. I’ve been using &lt;code&gt;sudo su -&lt;&#x2F;code&gt; to become
root and is good to know there are other ways to do it as well. The details
about the differences and other comments are explained
&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;376199&#x2F;sudo-su-vs-sudo-i-vs-sudo-bin-bash-when-does-it-matter-which-is-used&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-4&quot;&gt;Day 4&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: install stuff, explore the file structure and get familiar with “walking”
around.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;man hier&lt;&#x2F;code&gt; blew my mind. Oh, this is awesome. I googled about the filesystem
hierarchy so many times and did not know I already had all the information in
front of me.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-5&quot;&gt;Day 5&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: get familiar with &lt;code&gt;TAB&lt;&#x2F;code&gt;, &lt;code&gt;less&lt;&#x2F;code&gt;, &lt;code&gt;more&lt;&#x2F;code&gt;, and hidden&#x2F;dot files.&lt;&#x2F;p&gt;
&lt;p&gt;I was never a big fan of &lt;code&gt;more&lt;&#x2F;code&gt;. I normally use &lt;code&gt;less&lt;&#x2F;code&gt; as a pager, because it
allows me to scroll up and down easier, search for a string, jump to a
position, and quite fast for huge files.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;history&lt;&#x2F;code&gt; command is nice. I know about it and never used directly. I
prefer to &lt;code&gt;ctrl + r&lt;&#x2F;code&gt; and a trick to use the Up&#x2F;Down arrows to use the text that
has already been typed as the prefix for searching commands. Only works with
Bash, though. Check &lt;code&gt;readline&lt;&#x2F;code&gt; on
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Readline#History&quot;&gt;ArchWiki&lt;&#x2F;a&gt; for more
details.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-6&quot;&gt;Day 6&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: learn &lt;code&gt;Vim&lt;&#x2F;code&gt; and how to exit it.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been using Vim for quite a long time. I use it for almost everything
related to text: coding, writing my Master’s Thesis, writing TODO lists,
writing these notes, and probably other things I can’t remember now. And
despite those years of usage, every week I learn something new about it.
Learning Vim is a hard task, but definitely worth it.&lt;&#x2F;p&gt;
&lt;p&gt;I started the &lt;code&gt;vimtutor&lt;&#x2F;code&gt; but never finished it. So many times. They say it
takes about half an hour to go through it, I’ll try to do it (again). Actually,
I’ll try &lt;code&gt;neovim&lt;&#x2F;code&gt;’s tutorial (&lt;code&gt;:Tutor&amp;lt;Enter&amp;gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The insane new thing about Vim that I learned today is that it has seven (!)
basic modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Normal mode&lt;&#x2F;li&gt;
&lt;li&gt;Visual mode&lt;&#x2F;li&gt;
&lt;li&gt;Select mode&lt;&#x2F;li&gt;
&lt;li&gt;Insert mode&lt;&#x2F;li&gt;
&lt;li&gt;Command-line mode (or Cmdline mode)&lt;&#x2F;li&gt;
&lt;li&gt;Ex mode&lt;&#x2F;li&gt;
&lt;li&gt;Terminal-Job mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And then there are seven &lt;em&gt;additional&lt;&#x2F;em&gt; modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Operator-pending mode&lt;&#x2F;li&gt;
&lt;li&gt;Replace mode&lt;&#x2F;li&gt;
&lt;li&gt;Virtual Replace mode&lt;&#x2F;li&gt;
&lt;li&gt;Insert Normal mode&lt;&#x2F;li&gt;
&lt;li&gt;Terminal-Normal mode&lt;&#x2F;li&gt;
&lt;li&gt;Insert Visual mode&lt;&#x2F;li&gt;
&lt;li&gt;Insert Select mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can read more about them with the internal help: &lt;code&gt;:help vim-modes&lt;&#x2F;code&gt;.
Curiously, &lt;code&gt;neovim&lt;&#x2F;code&gt; has one fewer additional mode (at least as of &lt;code&gt;nvim 0.4.4&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-7&quot;&gt;Day 7&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: install a web server and use it to host a page.&lt;&#x2F;p&gt;
&lt;p&gt;The instructions are for Apache2, a.k.a. &lt;code&gt;httpd&lt;&#x2F;code&gt;, but I decided to use Caddy
instead. I’m curious about it’s automatic conversion from Markdown to HTML.&lt;&#x2F;p&gt;
&lt;p&gt;I got the binary from the &lt;a href=&quot;https:&#x2F;&#x2F;caddyserver.com&#x2F;download&quot;&gt;Download page&lt;&#x2F;a&gt; and
followed the official documentation to install it, creating a &lt;code&gt;systemd&lt;&#x2F;code&gt; service
file.&lt;&#x2F;p&gt;
&lt;p&gt;I am using this &lt;code&gt;Caddyfile&lt;&#x2F;code&gt; to serve a static-website:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;:80 {
&lt;&#x2F;span&gt;&lt;span&gt;	root * &#x2F;var&#x2F;lib&#x2F;caddy&#x2F;www&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	encode zstd gzip
&lt;&#x2F;span&gt;&lt;span&gt;	templates
&lt;&#x2F;span&gt;&lt;span&gt;	file_server
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And my &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;caddy&#x2F;www&#x2F;index.html&lt;&#x2F;code&gt; is a very complex one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{ { include &amp;quot;index.md&amp;quot; | markdown }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;afterthoughts&quot;&gt;Afterthoughts&lt;&#x2F;h4&gt;
&lt;p&gt;I should just follow the course. Lets play with Apache2. It is also simple, for
some reason I expected it to be a quite complex to set up. On the other hand, I
need to write html instead of Markdown :( but I can have a nice text only web
page using only one tag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pre&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Title
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## Section
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bla
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;day-8&quot;&gt;Day 8&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: search for specific patterns in text files.&lt;&#x2F;p&gt;
&lt;p&gt;The Apache2 logs are in &lt;code&gt;&#x2F;var&#x2F;log&#x2F;apache2&lt;&#x2F;code&gt;. To get all IP addresses that
connected to Apache:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -E &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F; (.*)&#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; access.log | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sort -n &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniq
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;27.123.241.20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;45.148.121.28
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;45.148.121.85
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;54.93.196.88
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;62.33.138.6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;66.249.75.147
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;66.249.75.149
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;74.120.14.52
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;75.76.251.71
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;91.193.5.58
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;92.118.160.17
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;99.10.249.153
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;103.49.188.166
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;116.28.214.153
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;125.41.10.86
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;125.43.93.10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;125.47.64.145
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;139.162.119.197
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;142.118.76.99
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;173.174.64.235
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;174.51.18.48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;177.76.230.216
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;179.99.69.186
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;186.71.77.9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;192.241.239.84
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;193.118.53.210
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;194.87.138.60
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;209.126.3.185
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;209.17.97.34
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Grepping &lt;code&gt;&#x2F;var&#x2F;log&#x2F;auth.log&lt;&#x2F;code&gt; I can see 72 different IPs trying to log as
&lt;code&gt;root&lt;&#x2F;code&gt; and 10 other random users. Hahah, nice.&lt;&#x2F;p&gt;
&lt;p&gt;I liked to know that &lt;code&gt;cut&lt;&#x2F;code&gt; can also remove words from a string, I finally got
what the &lt;code&gt;--fields&lt;&#x2F;code&gt; option mean.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-9&quot;&gt;Day 9&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: First look at network security.&lt;&#x2F;p&gt;
&lt;p&gt;The first task is to find open ports. I’ve used &lt;code&gt;nmap&lt;&#x2F;code&gt; for that before and
let’s see what happens, when running it on the remote server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;span&gt; Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-15 11:32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -03
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nmap&lt;&#x2F;span&gt;&lt;span&gt; scan report for localhost (127.0.0.1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; is up (0.000086s latency)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span&gt; shown: 998 closed ports
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;   STATE SERVICE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;22&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt; open  ssh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;80&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt; open  http
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nmap&lt;&#x2F;span&gt;&lt;span&gt; done: 1 IP address (1 host up) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scanned&lt;&#x2F;span&gt;&lt;span&gt; in 0.07 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice, it can see &lt;code&gt;ssh&lt;&#x2F;code&gt; and something for &lt;code&gt;http&lt;&#x2F;code&gt;, that is &lt;code&gt;apache2&lt;&#x2F;code&gt; on port &lt;code&gt;80&lt;&#x2F;code&gt;
here. But it is interesting how different it is from my laptop:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap 35.228.166.73
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;span&gt; Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-15 11:32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -03
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nmap&lt;&#x2F;span&gt;&lt;span&gt; scan report for 73.166.228.35.bc.googleusercontent.com (35.228.166.73)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Host&lt;&#x2F;span&gt;&lt;span&gt; is up (0.25s latency)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span&gt; shown: 995 closed ports
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PORT&lt;&#x2F;span&gt;&lt;span&gt;     STATE    SERVICE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;19&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt;   filtered chargen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;22&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt;   open     ssh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;25&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt;   filtered smtp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;80&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt;   open     http
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5555&#x2F;tcp&lt;&#x2F;span&gt;&lt;span&gt; filtered freeciv
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Nmap&lt;&#x2F;span&gt;&lt;span&gt; done: 1 IP address (1 host up) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scanned&lt;&#x2F;span&gt;&lt;span&gt; in 23.00 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It finds three other &lt;code&gt;filtered&lt;&#x2F;code&gt; services. The manual says:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;The state is either open, filtered, closed, or unfiltered. Open means that
&lt;&#x2F;span&gt;&lt;span&gt;an application on the target machine is listening for connections&#x2F;packets
&lt;&#x2F;span&gt;&lt;span&gt;on that port. Filtered means that a firewall, filter, or other network
&lt;&#x2F;span&gt;&lt;span&gt;obstacle is blocking the port so that Nmap cannot tell whether it is open
&lt;&#x2F;span&gt;&lt;span&gt;or closed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, those ports might be or might not be open.&lt;&#x2F;p&gt;
&lt;p&gt;I tried to host something at those ports and could not get a connection from my
laptop, so they are blocked by Google by default and there’s nothing (?) I can
do. I can use all other ports though.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve never used &lt;a href=&quot;https:&#x2F;&#x2F;launchpad.net&#x2F;ufw&quot;&gt;ufw&lt;&#x2F;a&gt; before. It is time to learn
how to properly use a firewall and this one is simple and powerful enough,
although it uses &lt;code&gt;iptables&lt;&#x2F;code&gt; and not the “modern” &lt;code&gt;nftables&lt;&#x2F;code&gt;. I liked how simple
it is to allow or deny traffic in a port. But I can’t compare with other tools.&lt;&#x2F;p&gt;
&lt;p&gt;Changing my SSH port to a random number. I thought it was a bit pointless, but
apparently it
&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20201013122112&#x2F;https:&#x2F;&#x2F;danielmiessler.com&#x2F;blog&#x2F;no-moving-your-ssh-port-isnt-security-by-obscurity&#x2F;&quot;&gt;is not&lt;&#x2F;a&gt;.
Using &lt;code&gt;nmap&lt;&#x2F;code&gt;, it shows the port open, but with &lt;code&gt;unknown&lt;&#x2F;code&gt; as the service. Sounds
good.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-10&quot;&gt;Day 10&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: run stuff periodically with &lt;code&gt;cron&lt;&#x2F;code&gt; jobs.&lt;&#x2F;p&gt;
&lt;p&gt;Lazy people automate stuff :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;systemd&lt;&#x2F;code&gt; can also run jobs at specific times, using &lt;code&gt;systemd&#x2F;timers&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A fun cron job to add is to periodically change the SSH banner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;cron.hourly&#x2F;banner
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;games&#x2F;fortune &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;games&#x2F;cowsay &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &#x2F;etc&#x2F;banner.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;day-11&quot;&gt;Day 11&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: searching for files and patterns.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been using blindly &lt;code&gt;find&lt;&#x2F;code&gt; for quite a while. It was time to finally read
it’s manual. There’s more to it than &lt;code&gt;find . -iname &amp;quot;bla*&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zcat&lt;&#x2F;code&gt;, &lt;code&gt;zgrep&lt;&#x2F;code&gt;, &lt;code&gt;zless&lt;&#x2F;code&gt;, and &lt;code&gt;zmore&lt;&#x2F;code&gt; are awesome! Did not know I could
&lt;code&gt;cat&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;less&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;grep&lt;&#x2F;code&gt; gzip compressed files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-12&quot;&gt;Day 12&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: copy stuff around.&lt;&#x2F;p&gt;
&lt;p&gt;I like &lt;code&gt;rsync&lt;&#x2F;code&gt; to copy lots of small files (actually, also big and medium ones)
as it can create a “stream” of data instead of one new connection for each
file. It can also compress the files as it sends to the destination. This can
save &lt;em&gt;a lot&lt;&#x2F;em&gt; of time. I normally use &lt;code&gt;rsync -azvP src dst&lt;&#x2F;code&gt; meaning &lt;code&gt;rsync --archive --compress --verbose --partial --progress src dst&lt;&#x2F;code&gt;. Sometimes the
&lt;code&gt;-P&lt;&#x2F;code&gt; flag can be annoying, but YMMV.&lt;&#x2F;p&gt;
&lt;p&gt;Something funny I found out is that &lt;code&gt;rsync&lt;&#x2F;code&gt; shows the SSH banner of the remote
server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avz&lt;&#x2F;span&gt;&lt;span&gt; linuxUpskill-gc:&#x2F;var&#x2F;www&#x2F;html .
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_________________________________________
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; Be free and open and breezy! Enjoy!     \
&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Things&lt;&#x2F;span&gt;&lt;span&gt; won&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t get any better so get used |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; \ to it.                                  &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  -----------------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          \   ^__^
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;           \  (oo)\_______
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;              (__)\       )\&#x2F;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  ||----w |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  ||     ||
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;receiving incremental file list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;html&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;html&#x2F;404.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;html&#x2F;index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;html&#x2F;robots.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sent 104 bytes  received 3,710 bytes  693.45 bytes&#x2F;sec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;total size is 11,324  speedup is 2.97
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;day-13&quot;&gt;Day 13&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: familiarize with the Linux permission system.&lt;&#x2F;p&gt;
&lt;p&gt;It is way simpler to use &lt;code&gt;u+w&lt;&#x2F;code&gt; or &lt;code&gt;o-rwx&lt;&#x2F;code&gt; than playing around with octal
numbers for &lt;code&gt;chmod&lt;&#x2F;code&gt;. I didn’t know I could change the permission to more than
one letter of &lt;em&gt;ugo&lt;&#x2F;em&gt;, as in &lt;code&gt;chmod go-wr [files]&lt;&#x2F;code&gt;, it never occurred to me to
try that either.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo bla, blabla &amp;gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -la&lt;&#x2F;span&gt;&lt;span&gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-rw-rw-r--&lt;&#x2F;span&gt;&lt;span&gt; 1 user user 12 Oct 21 12:11 file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; chmod ug-w file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -la&lt;&#x2F;span&gt;&lt;span&gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-r--r--r--&lt;&#x2F;span&gt;&lt;span&gt; 1 user user 12 Oct 21 12:11 file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo hehe &amp;gt;&amp;gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-bash:&lt;&#x2F;span&gt;&lt;span&gt; file.txt: Permission denied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;day-14&quot;&gt;Day 14&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: user management and permissions.&lt;&#x2F;p&gt;
&lt;p&gt;I always confuse &lt;code&gt;useradd&lt;&#x2F;code&gt; and &lt;code&gt;adduser&lt;&#x2F;code&gt;, after all they are anagrams.
&lt;a href=&quot;https:&#x2F;&#x2F;serverfault.com&#x2F;questions&#x2F;218993&#x2F;whats-the-difference-between-useradd-and-adduser&quot;&gt;This ServerFault&lt;&#x2F;a&gt;
question has a nice answer about it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;adduser is a friendlier interactive frontend to useradd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I found out it is possible to enable offensive messages when an user type an
incorrect password when &lt;code&gt;sudo&lt;&#x2F;code&gt;ing. Just add &lt;code&gt;Defaults	insults&lt;&#x2F;code&gt; to
&lt;code&gt;&#x2F;etc&#x2F;sudoers&lt;&#x2F;code&gt;, obviously using &lt;code&gt;visudo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Nice to know that it is possible to enable specific commands for a user to run
with &lt;code&gt;sudo&lt;&#x2F;code&gt; without granting full &lt;code&gt;sudo&lt;&#x2F;code&gt;, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fred&lt;&#x2F;span&gt;&lt;span&gt;    ALL = NOPASSWD:&#x2F;sbin&#x2F;reboot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fred&lt;&#x2F;span&gt;&lt;span&gt;    ALL = NOPASSWD:&#x2F;usr&#x2F;bin&#x2F;ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows user &lt;code&gt;fred&lt;&#x2F;code&gt; to &lt;code&gt;sudo ls&lt;&#x2F;code&gt; and &lt;code&gt;sudo reboot&lt;&#x2F;code&gt;, without typing the
password, but does not allow any other command with &lt;code&gt;sudo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-15&quot;&gt;Day 15&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: package management, with &lt;code&gt;apt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I used a few different package managers before:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;synaptic&lt;&#x2F;code&gt; (when I used Kurumin, back then)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;apt-get&lt;&#x2F;code&gt; (when I switched to Ubuntu)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;portage&lt;&#x2F;code&gt; (when I used Gentoo)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;apt-get&lt;&#x2F;code&gt; (again, briefly, when I used Debian in 2011)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pacman&lt;&#x2F;code&gt; (when I switched to ArchLinux)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wish I remember the first time I tried Kurumin, but I don’t. I think I
compiled Gentoo in 2008, I’m not sure. But I remember how fast my computer
became. It was an AMD 32-bit single-core CPU, 1.2 GHz, 384 MiB RAM DDR, GeForce
4 MM 440, with hand soldered electrolytic capacitors in the motherboard
(because they overheated and needed to be replaced). This computer was bought
in ~2000, and when I finally managed to have a working Kernel, it needed ~12
seconds to fully boot! It had a very slow hard drive, slow RAM, slow CPU, and
still was insanely fast! How I miss Gentoo…&lt;&#x2F;p&gt;
&lt;p&gt;ArchWiki has a &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Pacman&#x2F;Rosetta&quot;&gt;Rosetta&lt;&#x2F;a&gt;
page, that “translates” commands from one package manager to other. It is a
nice reference when dealing with different systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-16&quot;&gt;Day 16&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: managing tape archives, a.k.a &lt;em&gt;tarballs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Vim is always surprising me. Today I learned you can open file archives in Vim.
It is possible to open &lt;code&gt;.zip&lt;&#x2F;code&gt;, &lt;code&gt;.tar.gz&lt;&#x2F;code&gt;, &lt;code&gt;.tar.bz&lt;&#x2F;code&gt;, etc., and even modify its
content on the fly. No need to extract, edit, archive again.&lt;&#x2F;p&gt;
&lt;p&gt;I have a &lt;code&gt;targz&lt;&#x2F;code&gt; function in one of my dotfiles to create an archive of a bunch
of files or a directory. It’s time to get rid of it and learn how to properly
use &lt;code&gt;tar&lt;&#x2F;code&gt; and &lt;code&gt;gzip&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;bzip&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-17&quot;&gt;Day 17&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: compiling stuff.&lt;&#x2F;p&gt;
&lt;p&gt;I liked to &lt;code&gt;.&#x2F;configure&lt;&#x2F;code&gt; &lt;code&gt;nmap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; CFLAGS=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-O2 -march=native&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; CXXFLAGS=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-O2 -march=native&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; .&#x2F;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# skipping lots of lines...
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;       .
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;             } 6 6 {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            ==. Y ,==
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;              &#x2F;^^^\  .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;             &#x2F;     \  )  Ncat: A modern interpretation of classic Netcat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            (  )-(  )&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;            -&amp;quot;&amp;quot;---&amp;quot;&amp;quot;---   &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;           &#x2F;   Ncat    \_&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          (     ____
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;           \_.=|____E
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Configuration complete.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   (  )   &#x2F;\   _                 (
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    \ |  (  \ ( \.(               )                      _____
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  \  \ \  `  `   ) \             (  ___                 &#x2F; _   \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (_`    \+   . x  ( .\            \&#x2F;   \____-----------&#x2F; (o)   \_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;- .-               \+  ;          (  O                           \____
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(__                +- .( -&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.- &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;.   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span&gt;____________  `              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_____&lt;&#x2F;span&gt;&lt;span&gt;            ._._: &amp;lt;_ - &amp;lt;- _- _  VVVVVVV VV V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\                \&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;.&#x2F;.+-  . .- &#x2F;  +--  - .    (--_AAAAAAA__A_&#x2F;                |
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;x  &#x2F; x _&#x2F; (                \______________&#x2F;&#x2F;_              \_______
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; , x &#x2F; ( &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;  . &#x2F; .  &#x2F;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\_&lt;&#x2F;span&gt;&lt;span&gt;__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          \     &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &#x2F;  &#x2F;  _&#x2F; &#x2F;    +                                       |           \   &#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;  (__&#x2F;                                               &#x2F;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;                                                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;                  &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;  NMAP IS A POWERFUL TOOL -- USE CAREFULLY AND RESPONSIBLY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool ASCII art!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-18&quot;&gt;Day 18&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: cleaning-up old logs.&lt;&#x2F;p&gt;
&lt;p&gt;Logs can save your system. If there’s a weird behaviour somewhere, the first
thing to check is the logs. But logs can also flood your system. In fact, this
was what crashed some servers I was responsible for at my job and it was not
nice. I wrote about that incident and how to tame Docker logs
[here]({% post_url 2020-09-13-careful_with_docker_logs %}).&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;&#x2F;etc&#x2F;cron.daily&#x2F;logrotate&lt;&#x2F;code&gt; there’s a line that checks if there are any
&lt;code&gt;systemd&#x2F;timers&lt;&#x2F;code&gt;, if so, &lt;code&gt;cron&lt;&#x2F;code&gt; does nothing and let &lt;code&gt;systemd&lt;&#x2F;code&gt; do the job.
That’s clever. The timer is configured in
&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;timers.target.wants&#x2F;logrotate.timer&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;logrotate&lt;&#x2F;code&gt;’s log file is in a different path: &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;logrotate&#x2F;status&lt;&#x2F;code&gt;.
That’s funny!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;day-19&quot;&gt;Day 19&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: overview of the Linux Virtual File System.&lt;&#x2F;p&gt;
&lt;p&gt;Inodes. Inodes everywhere. If I got it correctly, an inode is a bunch of
information about the file&#x2F;directory. It contains filename, file owner, file
permissions, creation&#x2F;modification times, where the file is on disk, and maybe
more. So, it is metadata.&lt;&#x2F;p&gt;
&lt;p&gt;To find a file by it’s inode number, you have to scan to entire filesystem. The
inode number is per filesystem, so there might be more than one file with the
same number. To locate a file by its inode number, without traversing to a
different filesystem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo find &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -mount -inum&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;efi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;proc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;sys &#x2F;boot&#x2F;efi &#x2F;proc
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 0               Blocks: 0          IO Block: 4096   directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 18h&#x2F;24d Inode: 1           Links: 13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0555&#x2F;dr-xr-xr-x)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:03.292000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:03.292000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:03.292000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;boot&#x2F;efi
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 512             Blocks: 1          IO Block: 512    directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 80fh&#x2F;2063d      Inode: 1           Links: 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0755&#x2F;drwxr-xr-x)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 1969-12-31 21:00:00.000000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 1969-12-31 21:00:00.000000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 1969-12-31 21:00:00.000000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 0               Blocks: 0          IO Block: 1024   directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 5h&#x2F;5d   Inode: 1           Links: 120
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0555&#x2F;dr-xr-xr-x)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; (    0&#x2F;    root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:01.390534452&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:01.390534452&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-22 18:38:01.390534452&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I just found out, empirically, that there’s no file with inode 0. This number
is reserved.&lt;&#x2F;p&gt;
&lt;p&gt;I think I finally got the difference between a &lt;em&gt;hard&lt;&#x2F;em&gt; and &lt;em&gt;soft&lt;&#x2F;em&gt; link. But I am
definitely not sure about it. The following copy-pasta blob from a terminal
might shred some light on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls &amp;gt; &#x2F;tmp&#x2F;bla.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ln &#x2F;tmp&#x2F;bla.txt link_hard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;bla.txt link_soft
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;tmp&#x2F;bla.txt link_hard link_soft
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;bla.txt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 82              Blocks: 8          IO Block: 4096   regular file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 3122        Links: 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0664&#x2F;-rw-rw-r--)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:55.123855608&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; link_hard
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 82              Blocks: 8          IO Block: 4096   regular file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 3122        Links: 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0664&#x2F;-rw-rw-r--)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:55.123855608&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; link_soft -&amp;gt; &#x2F;tmp&#x2F;bla.txt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 12              Blocks: 0          IO Block: 4096   symbolic link
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 292697      Links: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0777&#x2F;lrwxrwxrwx)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:14.681037964&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:03.624369542&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:03.624369542&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv &#x2F;tmp&#x2F;bla.txt &#x2F;tmp&#x2F;bla2.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; stat &#x2F;tmp&#x2F;bla2.txt link_hard link_soft
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp&#x2F;bla2.txt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 82              Blocks: 8          IO Block: 4096   regular file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 3122        Links: 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0664&#x2F;-rw-rw-r--)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:31:42.488385936&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:31:39.232189075&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; link_hard
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 82              Blocks: 8          IO Block: 4096   regular file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 3122        Links: 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0664&#x2F;-rw-rw-r--)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:13:43.003122821&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:38.554481313&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;File:&lt;&#x2F;span&gt;&lt;span&gt; link_soft -&amp;gt; &#x2F;tmp&#x2F;bla.txt
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Size:&lt;&#x2F;span&gt;&lt;span&gt; 12              Blocks: 0          IO Block: 4096   symbolic link
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Device:&lt;&#x2F;span&gt;&lt;span&gt; 801h&#x2F;2049d      Inode: 292697      Links: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; (0777&#x2F;lrwxrwxrwx)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Uid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1001&#x2F;       h)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Gid:&lt;&#x2F;span&gt;&lt;span&gt; ( 1002&#x2F;       h)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Access:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:14.681037964&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Modify:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:03.624369542&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Change:&lt;&#x2F;span&gt;&lt;span&gt; 2020-10-29 16:14:03.624369542&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -0300
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Birth:&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; file link_*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link_hard:&lt;&#x2F;span&gt;&lt;span&gt; ASCII text
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link_soft:&lt;&#x2F;span&gt;&lt;span&gt; broken symbolic link to &#x2F;tmp&#x2F;bla.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;day-20&quot;&gt;Day 20&lt;&#x2F;h3&gt;
&lt;p&gt;Goal: ultimate laziness with scripts.&lt;&#x2F;p&gt;
&lt;p&gt;This is the last lesson of the Linux Upskill Challenge.&lt;&#x2F;p&gt;
&lt;p&gt;Scripting is an endless topic. As Bilbo would say, &lt;em&gt;You start with a shebang,
and if you don’t keep your feet, there is no knowing where you might be swept
off to.&lt;&#x2F;em&gt; This is a very powerful tool, but without paying attention to all
details, a mistake can be the Destroyer of All Servers. Powerful, efficient,
and simple.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;I joined this course hoping I’d learn more about managing a server, in
particular to improve my backup strategy. I ended up learning a lot more than I
expected, not only about a &lt;abbr title=&quot;Virtual Private Server&quot;&gt;VPS&lt;&#x2F;abbr&gt; but
also general Linux-related stuff.&lt;&#x2F;p&gt;
&lt;p&gt;It did not “consume” much time daily, it was very pleasant and time efficient.
I liked how small, yet complete, each lecture was, and it was up to the learner
to dig deeper as it pleased.&lt;&#x2F;p&gt;
&lt;p&gt;This course was totally worth it.&lt;&#x2F;p&gt;
&lt;p&gt;I have some final thoughts that don’t belong to any specific daily log, but are
still relevant.&lt;&#x2F;p&gt;
&lt;p&gt;Never get a &lt;abbr title=&quot;Virtual Private Server&quot;&gt;VPS&lt;&#x2F;abbr&gt; on the other side
of the world, if possible. I decided to get one in Finland (because, why not?)
and I can feel the latency to type any commands in the terminal. I can type
normally, it is not that slow. But the typing latency is there. I can’t measure
it, but I can feel it. The average &lt;code&gt;ping&lt;&#x2F;code&gt; to this server is 297 ms, versus 19
ms for a server in Brazil (same country as I am now). 300 ms is definitely
something we can note, but it is not a problem for what I was doing.&lt;&#x2F;p&gt;
&lt;p&gt;It doesn’t matter how long ago you started using Vim (or Neovim), take some
time to go through &lt;code&gt;vim-tutor&lt;&#x2F;code&gt;. It takes about half an hour and it covers much
more than the basic usage. There are some great small new things to learn
there.&lt;&#x2F;p&gt;
&lt;p&gt;I recommend this course for anyone that wants to learn more about Linux, even if
you are not planning to be a sysadmin. The lessons are very well written and
there are many good tips to help a casual Linux user.&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="sysadmin"/>
        </entry>
    <entry xml:lang="en">
        <title>Setting up Raspberry Pi 3 with PiHole</title>
        <published>2020-10-13T00:00:00+00:00</published>
        <updated>2020-10-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/rasp3-pihole/"/>
        <id>https://heitorpb.github.io/bla/rasp3-pihole/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/rasp3-pihole/">&lt;p&gt;I decided to try &lt;a href=&quot;https:&#x2F;&#x2F;pi-hole.net&#x2F;&quot;&gt;PiHole&lt;&#x2F;a&gt; as a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DNS_sinkhole&quot;&gt;DNS sinkhole&lt;&#x2F;a&gt;. Here I logged how I set up my Raspberry Pi 3 with ArchLinux to run it.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is to have a way to block advertisement and trackers on my entire
network. &lt;a href=&quot;https:&#x2F;&#x2F;ublockorigin.com&#x2F;&quot;&gt;uBlock Origin&lt;&#x2F;a&gt; is a great browser plugin
that blocks those things on webpages, but I am lazy and want a solution that
works for my laptop, phone, and guest’s devices as well. And that’s what PiHole
tries to do.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;a data-flickr-embed=&quot;true&quot;
href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;50469705936&#x2F;in&#x2F;dateposted&#x2F;&quot;
title=&quot;Raspberry Pi&quot;&gt;&lt;img
src=&quot;https:&#x2F;&#x2F;live.staticflickr.com&#x2F;65535&#x2F;50469705936_a068726cc1.jpg&quot;
width=&quot;500&quot; height=&quot;333&quot; alt=&quot;Raspberry Pi 3&quot;&gt;&lt;&#x2F;a&gt;&lt;script async
src=&quot;&#x2F;&#x2F;embedr.flickr.com&#x2F;assets&#x2F;client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I have an old
&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;products&#x2F;raspberry-pi-3-model-b-plus&#x2F;&quot;&gt;Raspberry Pi 3 B+&lt;&#x2F;a&gt;
that is now unused. Here is how I set it up to use PiHole.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;system-set-up&quot;&gt;System set up&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;raspberry&quot;&gt;Raspberry&lt;&#x2F;h3&gt;
&lt;p&gt;This part is setting up a new computer, not much to discuss here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;follow the &lt;a href=&quot;https:&#x2F;&#x2F;archlinuxarm.org&#x2F;platforms&#x2F;armv8&#x2F;broadcom&#x2F;raspberry-pi-3&quot;&gt;installation
instructions&lt;&#x2F;a&gt;,
with the AArch64 &lt;em&gt;thingy&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;update the system&lt;&#x2F;li&gt;
&lt;li&gt;user configuration
&lt;ul&gt;
&lt;li&gt;change &lt;code&gt;alarm&lt;&#x2F;code&gt; pass to something better&lt;&#x2F;li&gt;
&lt;li&gt;change &lt;code&gt;root&lt;&#x2F;code&gt; pass to something better&lt;&#x2F;li&gt;
&lt;li&gt;enable &lt;code&gt;alarm&lt;&#x2F;code&gt; user to &lt;code&gt;sudo&lt;&#x2F;code&gt; things&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;system configuration
&lt;ul&gt;
&lt;li&gt;install &lt;code&gt;vim&lt;&#x2F;code&gt;, &lt;code&gt;tmux&lt;&#x2F;code&gt; and &lt;code&gt;base-devel&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;set up ssh
&lt;ul&gt;
&lt;li&gt;allow only ssh keys&lt;&#x2F;li&gt;
&lt;li&gt;disable root login&lt;&#x2F;li&gt;
&lt;li&gt;generate and enable a new
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;SSH_keys&quot;&gt;ssh key&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;change GPU memory to 16 MB&lt;&#x2F;li&gt;
&lt;li&gt;set up hardware RNG (I like randomness)
&lt;ul&gt;
&lt;li&gt;remove &lt;code&gt;haveged&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;install &lt;code&gt;rng-tools&lt;&#x2F;code&gt; and configure it:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;etc&#x2F;conf.d&#x2F;rngd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RNGD_OPTS&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-o &#x2F;dev&#x2F;random -r &#x2F;dev&#x2F;hwrng&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;entropy increased from ~3700 to ~4000&lt;&#x2F;li&gt;
&lt;li&gt;can read from &lt;code&gt;&#x2F;dev&#x2F;random&lt;&#x2F;code&gt; at ~71 MB&#x2F;s:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; dd if=&#x2F;dev&#x2F;random of=&#x2F;dev&#x2F;null bs=1024 count=500000 iflag=fullblock
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;500000+0&lt;&#x2F;span&gt;&lt;span&gt; records in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;500000+0&lt;&#x2F;span&gt;&lt;span&gt; records out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;512000000&lt;&#x2F;span&gt;&lt;span&gt; bytes (512 MB, 488 MiB) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copied,&lt;&#x2F;span&gt;&lt;span&gt; 7.19274 s, 71.2 MB&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;set up time and timezone
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Systemd-timesyncd&quot;&gt;&lt;code&gt;systemd-timesyncd.service&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
as an NTP client&lt;&#x2F;li&gt;
&lt;li&gt;time zone: &lt;code&gt;timedatectl set-timezone America&#x2F;Sao_Paulo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;move  to permanent location&lt;&#x2F;li&gt;
&lt;li&gt;set up fixed IP address with
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Systemd-networkd&quot;&gt;systemd-networkd&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;set up &lt;code&gt;en_US.UTF-8&lt;&#x2F;code&gt; locale&lt;&#x2F;li&gt;
&lt;li&gt;install &lt;code&gt;yay&lt;&#x2F;code&gt;, configure &lt;code&gt;pacman&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;install &lt;code&gt;raspberrypi-userland-aarch64-git&lt;&#x2F;code&gt; (AUR)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some nice commands to run after everything is in place, just because:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Linux&lt;&#x2F;span&gt;&lt;span&gt; alarm 5.8.0-1-ARCH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1 SMP Sun Aug 9 00:03:44 UTC 2020 aarch64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; lscpu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Architecture:&lt;&#x2F;span&gt;&lt;span&gt;                    aarch64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; op-mode(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;                  32-bit, 64-bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt; Order:                      Little Endian
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;                          4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;On-line&lt;&#x2F;span&gt;&lt;span&gt; CPU(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list:&lt;&#x2F;span&gt;&lt;span&gt;             0-3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;per&lt;&#x2F;span&gt;&lt;span&gt; core:              1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Core&lt;&#x2F;span&gt;&lt;span&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;per&lt;&#x2F;span&gt;&lt;span&gt; socket:              4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Socket&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;                       1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vendor&lt;&#x2F;span&gt;&lt;span&gt; ID:                       ARM
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Model:&lt;&#x2F;span&gt;&lt;span&gt;                           4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt; name:                      Cortex-A53
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Stepping:&lt;&#x2F;span&gt;&lt;span&gt;                        r0p4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; max MHz:                     1200.0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CPU&lt;&#x2F;span&gt;&lt;span&gt; min MHz:                     600.0000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BogoMIPS:&lt;&#x2F;span&gt;&lt;span&gt;                        38.40
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Itlb multihit:     Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; L1tf:              Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Mds:               Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Meltdown:          Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Spec store bypass: Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Spectre v1:        Mitigation; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__user&lt;&#x2F;span&gt;&lt;span&gt; pointer sanitization
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Spectre v2:        Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Srbds:             Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vulnerability&lt;&#x2F;span&gt;&lt;span&gt; Tsx async abort:   Not affected
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flags:&lt;&#x2F;span&gt;&lt;span&gt;                           fp asimd evtstrm crc32 cpuid
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; free&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;      used      free      shared  buff&#x2F;cache   available
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mem:&lt;&#x2F;span&gt;&lt;span&gt;      899Mi      76Mi      41Mi       0.0Ki  781Mi        808Mi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this system needs almost 19 seconds to boot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; systemd-analyze
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Startup&lt;&#x2F;span&gt;&lt;span&gt; finished in 7.670s (kernel) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; 10.919s (userspace) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;18.590s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;graphical.target&lt;&#x2F;span&gt;&lt;span&gt; reached after 10.904s in userspace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It takes roughly 3 times longer than my 5-year old x86_64 laptop.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pihole&quot;&gt;PiHole&lt;&#x2F;h3&gt;
&lt;p&gt;Following the instructions in
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Pi-hole&quot;&gt;ArchWiki&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;install pihole-server: &lt;code&gt;yay -S pi-hole-server&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;install php things: &lt;code&gt;pacman -S php-sqlite&lt;&#x2F;code&gt; and enable the necessary
extensions&lt;&#x2F;li&gt;
&lt;li&gt;install &lt;code&gt;lighttpd&lt;&#x2F;code&gt; and &lt;code&gt;php-cgi&lt;&#x2F;code&gt; for the web interface&lt;&#x2F;li&gt;
&lt;li&gt;enable&#x2F;start &lt;code&gt;pihole-FTL.service&lt;&#x2F;code&gt; and &lt;code&gt;lighttpd.service&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;configure &lt;code&gt;&#x2F;etc&#x2F;pihole&#x2F;pihole-FTL.conf&lt;&#x2F;code&gt;:
&lt;ul&gt;
&lt;li&gt;change &lt;code&gt;DBINTERVAL&lt;&#x2F;code&gt; to &lt;code&gt;60.0&lt;&#x2F;code&gt; to minimize writes to the SD card&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;set up DoH for DNS over HTTPS:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ yay -S cloudflared&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;add some IPv6 entries in &lt;code&gt;&#x2F;etc&#x2F;cloudflared&#x2F;cloudflared.yml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;start&#x2F;enable &lt;code&gt;cloudflared.service&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;in the &lt;a href=&quot;http:&#x2F;&#x2F;pihole&#x2F;admin&#x2F;settings.php?tab=dns&quot;&gt;web settings page&lt;&#x2F;a&gt;:
&lt;ul&gt;
&lt;li&gt;disable all DNS servers and use &lt;code&gt;127.0.0.1#5300&lt;&#x2F;code&gt; only&lt;&#x2F;li&gt;
&lt;li&gt;enable DNSSEC&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;router&quot;&gt;Router&lt;&#x2F;h3&gt;
&lt;p&gt;I have a very low quality modem&#x2F;router from my ISP. It randomly resets the
admin password, hopefully it will retain my custom DNS&#x2F;DHCP configuration.
The only configuration needed is to set the Raspberry Pi as the only DNS
server in the DHCP settings. This was the most “complicated”&#x2F;boring part of
the setup, mainly because I had to reset the modem to log in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-thoughts-so-far&quot;&gt;My thoughts so far&lt;&#x2F;h2&gt;
&lt;p&gt;My SD card is slow as hell. It takes forever to update something and&#x2F;or move
data in it. Maybe I got used to my laptop with a good SSD and everything
slower became a headache? Or maybe the combination of a medium quality, old
SD card plus a Raspberry Pi is indeed slow.&lt;&#x2F;p&gt;
&lt;p&gt;The fan I added to the rasp is very noisy. That is annoying and I will
probably turn it off. I should monitor the temperature under high load to see
if it needs active cooling. It shouldn’t need, but I have a 3D printed case, so
air circulation is limited.&lt;&#x2F;p&gt;
&lt;p&gt;AArch64 support is still crappy. This is the most disappointing thing I
noticed. Years of product in the market and yet no decent support. I expected
more from the Raspberry Foundation.&lt;&#x2F;p&gt;
&lt;p&gt;PiHole is more efficient than I previously thought. Usually I have two or three
devices connected to my network, and the Pi shows the total RAM usage is about
150 MiB (~15% of the total).
The load average is below 0.1.
I’m impressed.&lt;&#x2F;p&gt;
&lt;p&gt;It took me about two days to set this thing up. Well, not exactly whole days: a
more precise description would be around 2.5 evenings, with some breaks. Was it
worth it? Using a Raspberry for something is better than using a Raspberry to
collect dust in a shelf. So, probably worth it, although I wouldn’t recommend
buying a rasp for this.&lt;&#x2F;p&gt;
</content>
        
        <category term="linux"/>
        
        <category term="networking"/>
        
        <category term="PiHole"/>
        
        <category term="Raspberry Pi"/>
        
        <category term="sysadmin"/>
        </entry>
    <entry xml:lang="en">
        <title>Be careful with your Docker logs</title>
        <published>2020-09-13T00:00:00+00:00</published>
        <updated>2020-09-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/careful-with-docker-logs/"/>
        <id>https://heitorpb.github.io/bla/careful-with-docker-logs/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/careful-with-docker-logs/">&lt;p&gt;This week, one of our testing servers got clogged and stopped responding: the
disk was full and it crashed some services. This machine is used only for
running Docker containers, so it must be a Docker problem, right?&lt;&#x2F;p&gt;
&lt;p&gt;Kind of.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h3&gt;
&lt;p&gt;This test server has 100 GiB of disk, and it was full. As it is a “Docker only”
server, the first obvious thing to check is how much space Docker used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker system df
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TYPE&lt;&#x2F;span&gt;&lt;span&gt;             TOTAL    ACTIVE    SIZE       RECLAIMABLE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Images&lt;&#x2F;span&gt;&lt;span&gt;           21       18        16GB       10.07GB (60%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Containers&lt;&#x2F;span&gt;&lt;span&gt;       18       17        812.8MB    15.24MB (1%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span&gt; Volumes    69       14        6.428GB    395.9MB (6%)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Build&lt;&#x2F;span&gt;&lt;span&gt; Cache      0        0         0B         0B
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, Docker is using about 23 GB. And the volumes are not to blame, they are
using only 6.4 GB. Pruning it would free some space and in fact saved the
machine. But a few hours later, the disk was full again. Something flooded the
disk, and it was not in any Docker container or volume.&lt;&#x2F;p&gt;
&lt;p&gt;I checked the machine logs, and they were small:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; du&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h -d&lt;&#x2F;span&gt;&lt;span&gt; 0 &#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1.6G&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;var&#x2F;log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I dug deeper and saw something weird:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; du&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h -d&lt;&#x2F;span&gt;&lt;span&gt; 0 &#x2F;var&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;99G&lt;&#x2F;span&gt;&lt;span&gt;     var&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then, the guilty service appeared:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; du&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h -d&lt;&#x2F;span&gt;&lt;span&gt; 0 &#x2F;var&#x2F;lib&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;97.6G&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;var&#x2F;lib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; du&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h -d&lt;&#x2F;span&gt;&lt;span&gt; 0 &#x2F;var&#x2F;lib&#x2F;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;96.7G&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;var&#x2F;lib&#x2F;docer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So it was Docker the whole time. But, what else Docker has, besides images,
layers, containers, volumes and build cache, as reported by &lt;code&gt;docker system df&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Docker has logs.&lt;&#x2F;p&gt;
&lt;p&gt;By default, Docker saves the output of each container in a &lt;code&gt;json&lt;&#x2F;code&gt; file in
&lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;&amp;lt;container_ID&amp;gt;&#x2F;&amp;lt;container_ID&amp;gt;-json.log&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; du&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;*&#x2F;*.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;315M&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;016...&#x2F;016...-json.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;164K&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;0d1...&#x2F;0d1...-json.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;51G&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;0f7...&#x2F;0f7...-json.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;6G&lt;&#x2F;span&gt;&lt;span&gt;      &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;0f8...&#x2F;0f8...-json.log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yeah, there were huge log files…&lt;&#x2F;p&gt;
&lt;p&gt;By
&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;config&#x2F;containers&#x2F;logging&#x2F;json-file&#x2F;#options&quot;&gt;default&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Docker saves the output of each container in &lt;code&gt;json&lt;&#x2F;code&gt; format. That is the
&lt;code&gt;json-file&lt;&#x2F;code&gt; log driver.&lt;&#x2F;li&gt;
&lt;li&gt;Each &lt;code&gt;*-json.log&lt;&#x2F;code&gt; can grow without any limits.&lt;&#x2F;li&gt;
&lt;li&gt;There can be any number of log files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;possible-solutions&quot;&gt;Possible solutions&lt;&#x2F;h3&gt;
&lt;p&gt;There are some ways to solve this problem:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;periodically remove&#x2F;trim the logs, with a cron job or &lt;code&gt;logrotate&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;use an external log aggregator like &lt;a href=&quot;https:&#x2F;&#x2F;www.fluentd.org&#x2F;&quot;&gt;fluentd&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;configure Docker to not flood the disk.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;First option is nice and generic. Second option is the most robust, but
involves setting up another server and configure things. For this server, the
third option is good enough.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s tell Docker to keep log files with a maximum of 1GB and to
have a maximum of 3 log files per service. To do so, we need to configure the
docker daemon. It is as simple as adding these lines to
&lt;code&gt;&#x2F;etc&#x2F;docker&#x2F;daemon.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log-driver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json-file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log-opts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max-size&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;max-file&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now it is time to restart docker. This automagically trimmed all the logs
and the machine was usable again. Services were running smoothly and well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Always rotate your logs.&lt;&#x2F;p&gt;
</content>
        
        <category term="Docker"/>
        
        <category term="linux"/>
        
        <category term="optimization"/>
        
        <category term="sysadmin"/>
        </entry>
    <entry xml:lang="en">
        <title>Multiple urls for a git remote</title>
        <published>2020-08-11T00:00:00+00:00</published>
        <updated>2020-08-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/git-multiple-remotes/"/>
        <id>https://heitorpb.github.io/bla/git-multiple-remotes/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/git-multiple-remotes/">&lt;p&gt;AKA automagic mirroring of your GitHub into GitLab.&lt;&#x2F;p&gt;
&lt;p&gt;There is a simple way to set up Git to use multiple push URLs for a single
remote. This way you can easily mirror any Git repository into any hosting
provider when &lt;code&gt;git push&lt;&#x2F;code&gt;ing.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s say your GitHub’s user is &lt;code&gt;user&lt;&#x2F;code&gt; and you want to mirror your &lt;code&gt;repo&lt;&#x2F;code&gt; into
GitLab. Your local clone is initially:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git remote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;  git@github.com:user&#x2F;repo.git (fetch)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;  git@github.com:user&#x2F;repo.git (push)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to configure the &lt;code&gt;origin&lt;&#x2F;code&gt; remote to have two URLs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git remote set-url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add --push&lt;&#x2F;span&gt;&lt;span&gt; origin git@github.com:user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git remote set-url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --add --push&lt;&#x2F;span&gt;&lt;span&gt; origin git@gitlab.com:user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the magical result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git remote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;  git@github.com:user&#x2F;repo.git (fetch)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;  git@github.com:user&#x2F;repo.git (push)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;  git@gitlab.com:user&#x2F;repo.git (push)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes every &lt;code&gt;git push&lt;&#x2F;code&gt; send the changes to both GitHub and GitLab,
creating an automatic backup.&lt;&#x2F;p&gt;
&lt;p&gt;But note that &lt;code&gt;git pull&lt;&#x2F;code&gt; is still from GitHub. It is not possible to pull
changes from two different repositories.&lt;&#x2F;p&gt;
</content>
        
        <category term="git"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>Caching computation in Python</title>
        <published>2020-06-24T00:00:00+00:00</published>
        <updated>2020-06-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/caching-python/"/>
        <id>https://heitorpb.github.io/bla/caching-python/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/caching-python/">&lt;p&gt;Caching is an optimization strategy that stores data in some memory, instead of
using and discarding it. The idea is to store data to serve if faster in the
future. This might save CPU time at the cost of increased memory usage.&lt;&#x2F;p&gt;
&lt;p&gt;There are many types of cache (hardware caches, network caches, software
caches…), with different applications and performances. In this post I will
discuss one type of software cache: &lt;em&gt;memoization&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memoization&quot;&gt;Memoization&lt;&#x2F;h2&gt;
&lt;p&gt;Memoization is a software cache technique in which the results of functions
are saved in a cache. The entries of this cache are served when the function is
called with the same inputs, instead of executing the function again.&lt;&#x2F;p&gt;
&lt;p&gt;It has this name because it is a “memorization” process: it saves the output of
a function for a given input. Let’s see an example: the factorial. A Python
code of the recursive version is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every time this function is called, it calculates \( (n-1)! \),
\( (n-2)! \), \( (n-3)! \), \( (n-4)! \), …, this is very fast for small
values of \(n\), but it can take some time for larger inputs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.6 &lt;&#x2F;span&gt;&lt;span&gt;µs ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;81.5 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7.4 &lt;&#x2F;span&gt;&lt;span&gt;µs ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.16 &lt;&#x2F;span&gt;&lt;span&gt;µs per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13.5 &lt;&#x2F;span&gt;&lt;span&gt;µs ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;92.3 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;294 &lt;&#x2F;span&gt;&lt;span&gt;µs ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9.45 &lt;&#x2F;span&gt;&lt;span&gt;µs per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.04 &lt;&#x2F;span&gt;&lt;span&gt;ms ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128 &lt;&#x2F;span&gt;&lt;span&gt;µs per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, it takes longer to calculate more intermediate results. Let’s try to
memoize it manually:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MemoizedFactorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache = {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache[n]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache[n] = n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(n-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache[n]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.cache[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And to use it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MemoizedFactorial&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# prints 120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And how fast it is?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;147 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.877 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, about 150 ns vs 1 ms to calculate the same number.
It is only ~7000 times faster to calculate this version of \(2000!\).
And then there’s something interesting for \(n &amp;lt; 2000\):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;147 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;137&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;150 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.896 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;147 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.47 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1234&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;175 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.81 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It takes roughly the same amount of time to “calculate” any value. And it is
expected: we are only retrieving values of a dictionary.&lt;&#x2F;p&gt;
&lt;p&gt;And notice the memory consumption for each function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sys
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;]: sys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getsizeof&lt;&#x2F;span&gt;&lt;span&gt;(x.cache)
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;73816
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This trades a function to an object that holds 73 KB of cache and yields a
dramatic performance increase.&lt;&#x2F;p&gt;
&lt;p&gt;It stores 2000 results in 73KB, what would happen if we had 2 million entries?
And then continue calculating more million entries? This implementation would
keep consuming more and more memory until there’s no more space.&lt;&#x2F;p&gt;
&lt;p&gt;To overcome this situation, there are many
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cache_replacement_policies&quot;&gt;caching algorithms&lt;&#x2F;a&gt;
that put in place policies to discard cached data when it becomes full. Here I will discuss the
&lt;em&gt;Least Recently Used&lt;&#x2F;em&gt; approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;least-recently-used-lru&quot;&gt;Least Recently Used (LRU)&lt;&#x2F;h2&gt;
&lt;p&gt;It is important to define a maximum size for the cache. This way the system
does not grow indefinitely and you can have control about its memory
consumption.&lt;&#x2F;p&gt;
&lt;p&gt;The downside is to discard information when the cache is at its limit. One way
of doing so is keeping only the recent entries, discarding the least recently
used.&lt;&#x2F;p&gt;
&lt;p&gt;This is not as simple as the example above, because it needs to also keep track
of when each entry was cached. On the other hand, it is already implemented in
Python’s Standard Library :) The module
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functools.html&quot;&gt;&lt;code&gt;functools&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; provides us the
decorator &lt;code&gt;lru_cache&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;functools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lru_cache
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lru_cache&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;n &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is the same function from the first code, but with a decorator added. The
default maximum size of the cache is &lt;code&gt;128&lt;&#x2F;code&gt;, I increased so we can compare
the timings with our handmade version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;27&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;68 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.697 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span&gt;]: %timeit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64.1 &lt;&#x2F;span&gt;&lt;span&gt;ns ± &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.05 &lt;&#x2F;span&gt;&lt;span&gt;ns per &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;(mean ± std. dev. of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span&gt;runs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000000 &lt;&#x2F;span&gt;&lt;span&gt;loops each)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This decorated function is almost three times faster than the handmade cache.&lt;&#x2F;p&gt;
&lt;p&gt;Another interesting advantage of this decorator is that it provides some
methods to see what happened with the cache:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;cache_info()&lt;&#x2F;code&gt; method displays some statistics about that cache: how many
&lt;em&gt;hits&lt;&#x2F;em&gt; (the number of times the requested data was in the cache), &lt;em&gt;misses&lt;&#x2F;em&gt;
(the number of times the requested data was not in the cache), the maximum
number of entries in the cache and the current number of cached items.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;cache_clear()&lt;&#x2F;code&gt; method empties the cache.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s see them in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;]: factorial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cache_clear&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;]: factorial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cache_info&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CacheInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;misses&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]: factorial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cache_info&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CacheInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;misses&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;In [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;]: factorial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cache_info&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;Out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CacheInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;misses&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maxsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currsize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After emptying the cache, there’s no information apart the maximum size. The
first time the function is called, there will be only misses as the cache is
empty. The second time this function is called, the result is already
available.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;Caching is an optimization technique in which we trade expensive computation
for memory. This memory, of course, needs to have a faster access than
computing the data again. As a consequence, the cache needs to be small.&lt;&#x2F;p&gt;
&lt;p&gt;To keep the cache under control, a number of caching strategies exists. The
Least Recently Used approach is an efficient way to keep only the most
recently used entries. It is available in Python as
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functools.html#functools.lru_cache&quot;&gt;&lt;code&gt;functools.lru_cache&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
        <category term="python"/>
        
        <category term="optimization"/>
        
        <category term="cache"/>
        </entry>
    <entry xml:lang="en">
        <title>Convert files to UTF-8</title>
        <published>2020-05-12T00:00:00+00:00</published>
        <updated>2020-05-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/utf-8-files/"/>
        <id>https://heitorpb.github.io/bla/utf-8-files/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/utf-8-files/">&lt;p&gt;Whenever we are working with lots of text files we might have to deal with
their &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Character_encoding&quot;&gt;encoding&lt;&#x2F;a&gt;. Reading a
file with the wrong encoding feeds obscure data to our code. This way, the
result becomes unpredictable&lt;&#x2F;p&gt;
&lt;p&gt;For example, saving the string &lt;code&gt;Kalsarikännit&lt;&#x2F;code&gt; as an UTF-8 text file and then
reading it in Python as an ASCII file gives an error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ascii&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;afile:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span&gt;afile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;stdin&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;encoding&#x2F;ascii.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span&gt;, in decode
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;codecs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ascii_decode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.errors)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        UnicodeDecodeError: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ascii&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; codec can&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;t decode byte 0xc3 in position 8:&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ordinal not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve run into this problem last week, when I had to parse hundreds of
&lt;abbr title=&quot;comma-separated values are simple text files that represent a spreadsheet&quot;&gt;CSV&lt;&#x2F;abbr&gt;
files. Most of them were fine, but I encountered weird problems, similar to the shown
above, in some files. It turned out those problematic files were saved from a
Windows machine, with &lt;code&gt;ISO-8859-1&lt;&#x2F;code&gt; encoding.&lt;&#x2F;p&gt;
&lt;p&gt;One way to display the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Magic_number_(programming)#In_files&quot;&gt;mime-type&lt;&#x2F;a&gt;
of a file and its encoding is by using the
&lt;a href=&quot;https:&#x2F;&#x2F;www.darwinsys.com&#x2F;file&#x2F;&quot;&gt;&lt;code&gt;file&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; command, that comes with most free
operating systems (Linux, BSD, etc):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mime &lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bla.txt:&lt;&#x2F;span&gt;&lt;span&gt; text&#x2F;plain; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;us-ascii
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ble.txt:&lt;&#x2F;span&gt;&lt;span&gt; text&#x2F;plain; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iso-8859-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k.csv:&lt;&#x2F;span&gt;&lt;span&gt;   text&#x2F;plain; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or display only the encoding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mime-encoding &lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bla.txt:&lt;&#x2F;span&gt;&lt;span&gt; us-ascii
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ble.txt:&lt;&#x2F;span&gt;&lt;span&gt; iso-8859-1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k.csv:&lt;&#x2F;span&gt;&lt;span&gt;   utf-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or only the mime-type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --mime-type &lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bla.txt:&lt;&#x2F;span&gt;&lt;span&gt; text&#x2F;plain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ble.txt:&lt;&#x2F;span&gt;&lt;span&gt; text&#x2F;plain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;k.csv:&lt;&#x2F;span&gt;&lt;span&gt;   text&#x2F;plain
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In these examples, we can see 3 plain-text files, each one with a different
encoding.&lt;&#x2F;p&gt;
&lt;p&gt;To convert a text file between encoding, we can use the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Iconv&quot;&gt;&lt;code&gt;iconv&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. So, to convert &lt;em&gt;from&lt;&#x2F;em&gt;
&lt;code&gt;ISO-8859-1&lt;&#x2F;code&gt; &lt;em&gt;to&lt;&#x2F;em&gt; &lt;code&gt;UTF-8&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; iconv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; iso-8859-1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; utf-8 infile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; outfile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To convert all files in current directory from a different encoding to &lt;code&gt;UTF-8&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file --mime-encoding &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed -E &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&#x2F;.*: &#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc &lt;&#x2F;span&gt;&lt;span&gt;!= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; Converting from $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span&gt; to UTF-8: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iconv -f &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc -t&lt;&#x2F;span&gt;&lt;span&gt; utf-8 &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.utf
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mv &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.utf &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A small bash script with &lt;code&gt;sed&lt;&#x2F;code&gt;, &lt;code&gt;file&lt;&#x2F;code&gt; and &lt;code&gt;iconv&lt;&#x2F;code&gt; is very versatile to
uniformize the encoding of several text files. And it saves the day.&lt;&#x2F;p&gt;
</content>
        
        <category term="analysis"/>
        
        <category term="encoding"/>
        
        <category term="linux"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>Random numbers from &#x2F;dev&#x2F;urandom in Bash</title>
        <published>2020-04-07T00:00:00+00:00</published>
        <updated>2020-04-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/bash-random-numbers/"/>
        <id>https://heitorpb.github.io/bla/bash-random-numbers/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/bash-random-numbers/">&lt;p&gt;In a GNU&#x2F;Linux distributions, there are special files (&lt;code&gt;&#x2F;dev&#x2F;random&lt;&#x2F;code&gt; and
&lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt;) to access the kernel’s random number generator. But how
do we get random numbers from them in a bash script?&lt;&#x2F;p&gt;
&lt;p&gt;If we try to &lt;code&gt;cat&lt;&#x2F;code&gt; them we get random things:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;dev&#x2F;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;XB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;7;Mq&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$,dH՞ՈT=H}0]eS19Ѡ
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hd9&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;7ܢVO&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y.ۧMW^C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Something a bit weirder happens with &lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt;: it continues vomiting
characters really fast at you until you stop it with &lt;code&gt;Ctrl + C&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What’s the difference between &lt;code&gt;&#x2F;dev&#x2F;random&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt;? Lets check the
manpage for &lt;code&gt;random (4)&lt;&#x2F;code&gt;, as of Linux 5.6:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;   The  random number generator gathers environmental noise from device driv‐
&lt;&#x2F;span&gt;&lt;span&gt;   ers and other sources into an entropy pool.  The generator also  keeps  an
&lt;&#x2F;span&gt;&lt;span&gt;   estimate  of  the  number of bits of noise in the entropy pool.  From this
&lt;&#x2F;span&gt;&lt;span&gt;   entropy pool, random numbers are created.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   When read, the &#x2F;dev&#x2F;urandom device returns random bytes using a pseudoran‐
&lt;&#x2F;span&gt;&lt;span&gt;   dom number generator seeded from the entropy pool.  Reads from this device
&lt;&#x2F;span&gt;&lt;span&gt;   do not block (i.e., the CPU is not yielded), but can incur an  appreciable
&lt;&#x2F;span&gt;&lt;span&gt;   delay when requesting large amounts of data.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   The  &#x2F;dev&#x2F;random  device  is a legacy interface which dates back to a time
&lt;&#x2F;span&gt;&lt;span&gt;   where  the  cryptographic  primitives  used  in  the   implementation   of
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;dev&#x2F;urandom  were  not  widely trusted.  It will return random bytes only
&lt;&#x2F;span&gt;&lt;span&gt;   within the estimated number of bits of fresh noise in  the  entropy  pool,
&lt;&#x2F;span&gt;&lt;span&gt;   blocking if necessary.  &#x2F;dev&#x2F;random is suitable for applications that need
&lt;&#x2F;span&gt;&lt;span&gt;   high quality randomness, and can afford indeterminate delays.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   When the entropy pool is empty, reads from &#x2F;dev&#x2F;random  will  block  until
&lt;&#x2F;span&gt;&lt;span&gt;   additional  environmental  noise  is  gathered. (...)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From this, we get that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the Kernel maintains a pool of entropy from random things that happens in the
computer.&lt;&#x2F;li&gt;
&lt;li&gt;both special files use this entropy pool to seed a &lt;abbr
title=&quot;pseudorandom number generator&quot;&gt;PRNG&lt;&#x2F;abbr&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;dev&#x2F;random&lt;&#x2F;code&gt; waits until there are enough randomness to output something.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt; is preferred.&lt;&#x2F;li&gt;
&lt;li&gt;both files gives us &lt;em&gt;bytes&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And from the Kernel’s source we get that &lt;code&gt;urandom&lt;&#x2F;code&gt; uses
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Salsa20#ChaCha_variant&quot;&gt;ChaCha20&lt;&#x2F;a&gt; as &lt;abbr
title=&quot;cryptographiccally secure pseudorandom number generator&quot;&gt;CSPRNG&lt;&#x2F;abbr&gt;.
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#kernel-source&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We now need a tool to read a specific number of bytes from those files and
convert it to something human readable. And here comes &lt;code&gt;od&lt;&#x2F;code&gt;, a Unix
command to display data in several formats.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#od&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; The default is octal, hence the
name &lt;code&gt;od&lt;&#x2F;code&gt;: &lt;em&gt;octal dump&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this utility we can read &lt;code&gt;N&lt;&#x2F;code&gt; bytes from a file and display it in a
specified format. For example, here’s the dump of `Hello World“:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo Hello World | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;od
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0000000&lt;&#x2F;span&gt;&lt;span&gt; 062510 066154 020157 067527 066162 005144
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0000014
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first column is the offset, and then the octal representation of that line.
So, the second line of the output means: starting at the offset &lt;code&gt;0000014&lt;&#x2F;code&gt; we
have nothing, i.g. there are 14 (in octal, or 12 in decimal) characters in that
string.&lt;&#x2F;p&gt;
&lt;p&gt;It looks like &lt;code&gt;od&lt;&#x2F;code&gt; does not know how to count. There are 11 chars in &lt;code&gt;Hello World&lt;&#x2F;code&gt;! Lets see each char individually (&lt;code&gt;-c&lt;&#x2F;code&gt;) in octal (&lt;code&gt;-b&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;od -cb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0000000&lt;&#x2F;span&gt;&lt;span&gt;   H   e   l   l   o       W   o   r   l   d  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span&gt; 145 154 154 157 040 127 157 162 154 144 012
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0000014
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sweet, it counted the line ending as well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;od&lt;&#x2F;code&gt; can also read &lt;code&gt;N&lt;&#x2F;code&gt; bytes from a source and display it in a specified
format. So, to read 4 bytes from &lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt;, display it as an unsigned
integer without the offset column:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; od&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -vAn -N4 -t&lt;&#x2F;span&gt;&lt;span&gt; u4 &amp;lt; &#x2F;dev&#x2F;urandom
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;402803061
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And to use in your bash code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span&gt; 1 10)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;od -vAn -N4 -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; u4 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &#x2F;dev&#x2F;urandom)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this code, those 32 bits (4 bytes) from &lt;code&gt;urandom&lt;&#x2F;code&gt; are interpreted as an
integer. How do we get floats? If interested only in the range &lt;code&gt;[0, 1)&lt;&#x2F;code&gt;: simply
divide by the greatest possible value, \( 2^{32} - 1\).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Footnotes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#kernel-source&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;stable&#x2F;linux.git&#x2F;tree&#x2F;drivers&#x2F;char&#x2F;random.c?h=v5.6.2&amp;amp;id=4aa37c463764052c68c5c430af2a67b5d784c1e0&quot;&gt;file &lt;code&gt;drivers&#x2F;char&#x2F;random.c&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#od&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;manual&#x2F;html_node&#x2F;od-invocation.html&quot;&gt;GNU Coreutils&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
        <category term="linux"/>
        
        <category term="random"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>Always close your Matplotlib figures</title>
        <published>2020-03-18T00:00:00+00:00</published>
        <updated>2020-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/close-matplotlib-figures/"/>
        <id>https://heitorpb.github.io/bla/close-matplotlib-figures/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/close-matplotlib-figures/">&lt;p&gt;I’m working on a simulation that generates gigabytes of raw data. But I am a
Physicist: I &lt;em&gt;need plots&lt;&#x2F;em&gt;, not tables! So I made a set of scripts in Python
that parses all this data and generates about 50 plots.&lt;&#x2F;p&gt;
&lt;p&gt;It’s not a problem to generate lots of pdf’s with the plots. It’s not a problem
to write the Python code to parse the data and generate the plots.
&lt;a href=&quot;https:&#x2F;&#x2F;pandas.pydata.org&#x2F;&quot;&gt;Pandas&lt;&#x2F;a&gt; makes our life easy to read data and
&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;&quot;&gt;Matplotlib&lt;&#x2F;a&gt; has a nice interface to turn data in
figures.&lt;&#x2F;p&gt;
&lt;p&gt;I have a code with a structure like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;For every parameter alpha:
&lt;&#x2F;span&gt;&lt;span&gt;   Read the relevant Data
&lt;&#x2F;span&gt;&lt;span&gt;   Process the data
&lt;&#x2F;span&gt;&lt;span&gt;   Make and save the plot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In Python words:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Fixing random state for reproducibility
&lt;&#x2F;span&gt;&lt;span&gt;np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19680801&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Generate fake data&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    x = np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    y = np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;x, y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# pretend to do something with it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;x, y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plot_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: list, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: list, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fname&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;    fig = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    ax = fig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_subplot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(x, y, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#plt.show()
&lt;&#x2F;span&gt;&lt;span&gt;    fig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;savefig&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;plots&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{fname}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.png&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    x, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    x, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process_data&lt;&#x2F;span&gt;&lt;span&gt;(x, y)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot_data&lt;&#x2F;span&gt;&lt;span&gt;(x, y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(alpha))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If I run this code, It will create 50 png’s in the folder &lt;code&gt;plots&#x2F;&lt;&#x2F;code&gt;, similar to
this one:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;close-matplotlib-figures&#x2F;plots&#x2F;0.png&quot; alt=&quot;random data in a plot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, what’s the problem here?&lt;&#x2F;p&gt;
&lt;p&gt;Try running the code!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;$ python plot.py
&lt;&#x2F;span&gt;&lt;span&gt;plot.py:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;: RuntimeWarning: More than &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;figures have been opened. Figures created through the pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;(`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
&lt;&#x2F;span&gt;&lt;span&gt;  fig = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This warning appears several times. And it is a &lt;em&gt;warning&lt;&#x2F;em&gt;, not an error: the
code will &lt;em&gt;probably&lt;&#x2F;em&gt; work fine.
It says &lt;code&gt;and may consume too much memory&lt;&#x2F;code&gt;. But how much is too much?
Let’s use the &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;time&#x2F;&quot;&gt;GNU time&lt;&#x2F;a&gt; command to
discover the amount of memory used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;bin&#x2F;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%M&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; python bad-example.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bad-example.py:22:&lt;&#x2F;span&gt;&lt;span&gt; RuntimeWarning: More than 20 figures have been opened.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Figures&lt;&#x2F;span&gt;&lt;span&gt; created through the pyplot interface (`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matplotlib.pyplot.figure&lt;&#x2F;span&gt;&lt;span&gt;`) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retained&lt;&#x2F;span&gt;&lt;span&gt; until explicitly closed and may consume too much memory. (To control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; warning, see the rcParam `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure.max_open_warning&lt;&#x2F;span&gt;&lt;span&gt;`)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fig&lt;&#x2F;span&gt;&lt;span&gt; = plt.figure()
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt; ommiting several repeated messages here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bad-example.py:22:&lt;&#x2F;span&gt;&lt;span&gt; RuntimeWarning: More than 20 figures have been opened.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Figures&lt;&#x2F;span&gt;&lt;span&gt; created through the pyplot interface (`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;matplotlib.pyplot.figure&lt;&#x2F;span&gt;&lt;span&gt;`) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;are
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retained&lt;&#x2F;span&gt;&lt;span&gt; until explicitly closed and may consume too much memory. (To control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; warning, see the rcParam `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure.max_open_warning&lt;&#x2F;span&gt;&lt;span&gt;`)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fig&lt;&#x2F;span&gt;&lt;span&gt; = plt.figure()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;182032
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last number is the peak memory usage, in kbytes. In this case: &lt;code&gt;182032 kbytes&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s fix the warning. The problem is that we have too many figures
opened: we need to close them. The simplest way is to call &lt;code&gt;plt.close(fig)&lt;&#x2F;code&gt;
when the figure is not needed anymore:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Fixing random state for reproducibility
&lt;&#x2F;span&gt;&lt;span&gt;np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19680801&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Generate fake data&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    x = np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    y = np.random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;x, y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# pretend to do something with it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;x, y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plot_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: list, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: list, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fname&lt;&#x2F;span&gt;&lt;span&gt;: str):
&lt;&#x2F;span&gt;&lt;span&gt;    fig = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    ax = fig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_subplot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(x, y, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#plt.show()
&lt;&#x2F;span&gt;&lt;span&gt;    fig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;savefig&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;plots&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{fname}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.png&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;(fig)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    x, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    x, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process_data&lt;&#x2F;span&gt;&lt;span&gt;(x, y)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot_data&lt;&#x2F;span&gt;&lt;span&gt;(x, y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(alpha))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let’s see how much memory it uses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;bin&#x2F;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%M&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; python good-example.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;106652
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;😎&lt;&#x2F;p&gt;
&lt;p&gt;About &lt;code&gt;75000 kbytes&lt;&#x2F;code&gt; saved!&lt;&#x2F;p&gt;
</content>
        
        <category term="python"/>
        
        <category term="matplotlib"/>
        
        <category term="analysis"/>
        </entry>
    <entry xml:lang="en">
        <title>Python.format</title>
        <published>2018-11-29T00:00:00+00:00</published>
        <updated>2018-11-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/python-format/"/>
        <id>https://heitorpb.github.io/bla/python-format/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/python-format/">&lt;p&gt;The python way of formatting strings is very interesting. You just need a string
with &lt;code&gt;{}&lt;&#x2F;code&gt; and then tell python to change that to something. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can also format that to a string:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$£@æȩ&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$£@æȩ&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next obvious step is to format a string to itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the result is a &lt;em&gt;string&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can &lt;em&gt;evaluate&lt;&#x2F;em&gt; that string to turn it into a code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)))
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, some ultra advanced python code to rule them all:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.format(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {}))).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, {})).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))))
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;😎&lt;&#x2F;p&gt;
</content>
        
        <category term="python"/>
        
        <category term="random"/>
        
        <category term="TIL"/>
        </entry>
    <entry xml:lang="en">
        <title>Treasure Hunt</title>
        <published>2018-10-20T00:00:00+00:00</published>
        <updated>2018-10-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/geocaching/"/>
        <id>https://heitorpb.github.io/bla/geocaching/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/geocaching/">&lt;p&gt;So, I decided to hunt treasures 😎 Real treasures, not the ones from movies or
TV series. Some real humans hid real treasures around the world. And of course
they created real maps with instructions. This way other people can find those
treasures!&lt;&#x2F;p&gt;
&lt;p&gt;They&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#whom&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; named this ‘sport’ &lt;em&gt;Geocaching&lt;&#x2F;em&gt;. It’s quite a fancy name, but
&lt;em&gt;treasure hunting&lt;&#x2F;em&gt; sounds much cooler. The concept it simple: an adventurous
person hides a small treasure somewhere. They then create the &lt;em&gt;treasure map&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The treasure is also called a &lt;em&gt;cache&lt;&#x2F;em&gt;. It is mainly a &lt;em&gt;log book&lt;&#x2F;em&gt;.
When you find one, you should sign and celebrate! There might also have
something else for trade, like an used sock or foreign money. The treasures
have an ethereal value, not a financial one. The reward is &lt;em&gt;locating&lt;&#x2F;em&gt; it, not
selling gold. It’s in a container that should be waterproof and able to
survive the local weather and police. The police just loves exploding
them&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb1&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb2&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb3&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb4&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb5&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb6&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb7&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;We are in the 21st century, it doesn’t make any sense to make maps using
papyrus and quill pens. That is really cool but not compatible with today’s
technology. The current treasure maps rely on
&lt;em&gt;&lt;abbr title=&quot;Global Navigation Satellite System&quot;&gt;GNSS&lt;&#x2F;abbr&gt;&lt;&#x2F;em&gt;, such as &lt;em&gt;GPS&lt;&#x2F;em&gt;
and &lt;em&gt;&lt;abbr title=&quot;The Soviet version of GPS&quot;&gt;GLONASS&lt;&#x2F;abbr&gt;&lt;&#x2F;em&gt;. The map is the
approximate &lt;abbr title=&quot;Latitute and Longitude&quot;&gt;co-ordinates&lt;&#x2F;abbr&gt; of the
treasure. Sometimes with some more tips or with instructions to get to the
exact place.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.geocaching.com&#x2F;&quot;&gt;Geocaching&lt;&#x2F;a&gt; website maintains a big list of
treasure maps around the world. Go check if there’s a treasure near you right
now! And there’s the &lt;a href=&quot;https:&#x2F;&#x2F;www.cgeo.org&#x2F;&quot;&gt;c:geo&lt;&#x2F;a&gt; app to use in an Android
phone. For free. Yep, it’s free to hunt treasures 😃&lt;&#x2F;p&gt;
&lt;p&gt;I went with my friend Przemysław to hunt two treasures in the French side of
Geneva. It was a very fun adventure. This is where we went (we started near the
blue dots):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;map.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There was a very nice house and we decided to get a closer look, before the
quest.&lt;&#x2F;p&gt;
&lt;p&gt;We then decided to go for our first treasure. Near the Saint-Pierre de Pouilly
Church. This church was build in the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Roman_Era&quot;&gt;Roman Era&lt;&#x2F;a&gt;,
in the 13th century or earlier&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#church&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;church_small.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After looking around for a while, we decided to give up. Yep. Really. But why
not a last look around? Then we found it! Hidden there! There was it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;treasure_small.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A small piece of paper inside a plastic bag! The front was full, so we squeezed
our names in the back :) The first treasure we found! We were so excited! Can
you imagine finding a treasure?!?&lt;&#x2F;p&gt;
&lt;p&gt;Then we walked to the second treasure! We walked to the region in the map with
lots of brown (?), green (?) and purple (?) points. There we found something
unexpected.&lt;&#x2F;p&gt;
&lt;p&gt;In the middle of nowhere, there was a fence surrounding it. This way the cattle
don’t get inside. It’s in the end of a small forest there. There was it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;ave_maria.jpg&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;ave_maria_small.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This place is lovelly! Hidden from society, a small temple. Simple and yet
breathtaking.&lt;&#x2F;p&gt;
&lt;p&gt;The second treasure was supposed to be there. We didn’t find it though…&lt;&#x2F;p&gt;
&lt;p&gt;That was our adventure! 191 kcal burned, 3.74 km walked, 1 hour and 16 minutes.
Our success rate is quite low, 50%. But it was very fun! And the landscape is
awesome!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;landscape.jpg&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;geocaching&#x2F;landscape_small.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#whom&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: The guys in &lt;a href=&quot;https:&#x2F;&#x2F;groups.yahoo.com&#x2F;neo&#x2F;groups&#x2F;gpsstash&#x2F;conversations&#x2F;topics&#x2F;62&quot;&gt;this mailing list&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb1&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;archive.is&#x2F;20120904171554&#x2F;http:&#x2F;&#x2F;www.mywesttexas.com&#x2F;articles&#x2F;2010&#x2F;01&#x2F;08&#x2F;news&#x2F;top_stories&#x2F;pipe_bomb_geochaching_geocache_midland_academy_sports.txt&quot;&gt;bomb 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb2&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.gcdailyworld.com&#x2F;story&#x2F;1890701.html&quot;&gt;bomb 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb3&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.deseretnews.com&#x2F;article&#x2F;635160668&#x2F;Detonated-bomb-turns-out-to-be-box-of-toys.html&quot;&gt;bomb 3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb4&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20081202115708&#x2F;http:&#x2F;&#x2F;www.canada.com&#x2F;ottawacitizen&#x2F;news&#x2F;story.html?id=c7628126-a0f6-4a9e-a396-a40fa1948eab&quot;&gt;bomb 4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb5&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;articles.glendalenewspress.com&#x2F;2013-01-14&#x2F;news&#x2F;tn-818-0114-authorities-determine-suspicious-object-found-on-glendale-power-pole-to-be-safe_1_power-pole-suspicious-object-bomb-squad&quot;&gt;bomb 5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb6&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.bbc.com&#x2F;news&#x2F;uk-england-leeds-14039229&quot;&gt;bomb 6&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bomb7&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.ibtimes.com&#x2F;geocaching-awesome-scavenger-hunt-or-bomb-threat-waiting-happen-296371&quot;&gt;bomb 7&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#church&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Saint-Genis-Pouilly&quot;&gt;Saint-Genis-Pouilly - Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
        <category term="hiking"/>
        
        <category term="geocache"/>
        </entry>
    <entry xml:lang="en">
        <title>Hiking in Essertines - Switzerland</title>
        <published>2018-10-16T00:00:00+00:00</published>
        <updated>2018-10-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/essertineshiking/"/>
        <id>https://heitorpb.github.io/bla/essertineshiking/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/essertineshiking/">&lt;p&gt;Last week we had another &lt;em&gt;walking meeting&lt;&#x2F;em&gt;! This time, we went to the village
of Essertines, near Geneva, Switzerland. It’s a very lovely place, with old
beautiful buildings, small roads and wineries.&lt;&#x2F;p&gt;
&lt;p&gt;Click the images to see them bigger and to comment them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468016197&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3333.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Essertines belongs to the municipality of Dardagny. 1 861 people live in
there&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wtf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. There are 16 winemakers&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#winemakers&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. The vast majority of
apartments there have 3 rooms&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wtf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;44493621755&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3371.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We started the hike at about 10 in the morning. The weather was very nice:
sunny day, not too hot, not too cold and not humid :) The ladies in blue took
the liberty of being the guide:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468018287&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3342.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are some caves in that region, made in the second half of the 19th
century, to extract &lt;em&gt;bitumen&lt;&#x2F;em&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#oil&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. It is a black, gooey, icky sticky form of
petroleum. It’s main use is to make asphalt and to waterproof things&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wikiOil&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
I never imagined that it would be easy to get some petroleum for myself. But in
this region, you can literally stick your fingers in the rock and get that
goofy stuff for you 😎&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357033732&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3337.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I think someone tried to make a tent there, to rest after a long day of
extracting oil. Or maybe the gnomes built that to keep an eye on people? That
would explain why there’s no more exploration of bitumen there…&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468017267&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3338.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We continued walking through the forest :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357034362&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3340.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I really like those stairs built there. They are very minimalist, not fancy
at all and very, very gracious.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468019457&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3345.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then there was The Bridge! We stayed a few minutes there, looking at the funny
crustaceans in the river.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357035272&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3344.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The path looks very charming looking from The Bridge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357035952&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3351.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And, suddenly, the forest was gone. The view was dominated by grape vines!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357036642&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3353.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looking back, we could see the first signs of Autumn. Some trees were not that
green anymore. We can spot some yellow leafs and also some almost-red ones.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468021827&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3355.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The grapes also change their colours. The contrast of the red, yellow and green
leafs is amazing!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;44493620835&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3368.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I think I read in a sign in the vineyard they were Cabernet Sauvignon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;44493619915&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3364_cropped.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We also received the visit of a lonely, enchanting rider.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468023777&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3365.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the background, the majestic Jura Mountains!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;45357037202&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3359.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On our way through the village to the car, we found an iron peacock, guarding a
flower well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flickr.com&#x2F;photos&#x2F;heitorpb&#x2F;30468024607&#x2F;in&#x2F;album-72157702559519395&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;DSC_3369.JPG&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That was the end of our meeting. A very productive one, if you ask. Everyone
was actively involved! No one falling asleep or leaving for a coffee and never
returning. Our hike was ~3.6 km long at an average speed of 1.25
m&#x2F;s&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#analysis&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. I burned ~185 kcal&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#endomondo&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;map.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;essertineshiking&#x2F;imgs&#x2F;map.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Back to the car. Back to CERN. Back to work ⚛️&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wtf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;fr.wikipedia.org&#x2F;wiki&#x2F;Dardagny&quot;&gt;Dardagny - Wikipedia&lt;&#x2F;a&gt; (Page consultée le juin 13, 2018).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#winemakers&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;www.dardagny.ch&#x2F;index.php&#x2F;vie-economique&#x2F;vignerons-viticulteurs&quot;&gt;Dardagny - Vignerons - Viticulteurs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#oil&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.unige.ch&#x2F;forel&#x2F;files&#x2F;5114&#x2F;8949&#x2F;5654&#x2F;Guide_Geneve.pdf&quot;&gt;Guidebook: geology and archaeology of Geneva - Société de physique et d’histoire naturelle de Genève&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#wikiOil&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Asphalt&quot;&gt;Asphalt - Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#analysis&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;heitorPB&#x2F;HikingAnalysis&quot;&gt;Hiking Analysis&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#endomondo&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.endomondo.com&#x2F;users&#x2F;25410601&#x2F;workouts&#x2F;1215399714&quot;&gt;Endomondo Workout&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
        <category term="photography"/>
        
        <category term="hiking"/>
        
        <category term="analysis"/>
        </entry>
    <entry xml:lang="en">
        <title>The Swiss Far West and GPX fun</title>
        <published>2018-09-25T00:00:00+00:00</published>
        <updated>2018-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/swissfarwest/"/>
        <id>https://heitorpb.github.io/bla/swissfarwest/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/swissfarwest/">&lt;p&gt;Yesterday my supervisor and I went to a hike to the &lt;em&gt;Swiss Far West&lt;&#x2F;em&gt;, the westernmost
part of Switzerland. Unfortunately, we couldn’t go to the precise westernmost point
of the border with France, because that’s in the
&lt;abbr title=&quot;Latitude: 46.1323565, Longitude: 5.9559113&quot;&gt;middle&lt;&#x2F;abbr&gt; of the
river &lt;em&gt;Le Rhône&lt;&#x2F;em&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and we didn’t want to get inside the water.&lt;&#x2F;p&gt;
&lt;p&gt;I recorded our hike using &lt;a href=&quot;https:&#x2F;&#x2F;osmand.net&#x2F;&quot;&gt;OsmAnd&lt;&#x2F;a&gt;, a very nice app for
maps and location and finding out how to go from one place to another. And all
that offline! You only need internet connection to download the app :) Oh, and
it’s &lt;abbr title=&quot;as in free beer&quot;&gt;free&lt;&#x2F;abbr&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The app gave me &lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;swissfarwest&#x2F;hike.gpx&quot;&gt;this &lt;abbr title=&quot;GPS Exchange Format&quot;&gt;GPX&lt;&#x2F;abbr&gt;
file&lt;&#x2F;a&gt;. It’s basically an XML file with coordinates (latitude,
longidute, elevation and time) and some more information. You can read more
about the format on
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GPS_Exchange_Format&quot;&gt;WikiPedia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I found this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tkrajina&#x2F;gpxpy&quot;&gt;gpxpy&lt;&#x2F;a&gt; library to work with
&lt;abbr title=&quot;GPS Exchange Format&quot;&gt;GPX&lt;&#x2F;abbr&gt; files. It’s quite easy to use it
together with &lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;&quot;&gt;matplotlib&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;gpxpy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;matplotlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;animation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;mpl_toolkits.mplot3d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Axes3D
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;gpx_filename = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hike.gpx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;gps_lat = []
&lt;&#x2F;span&gt;&lt;span&gt;gps_long = []
&lt;&#x2F;span&gt;&lt;span&gt;gps_elevation = []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fig = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;ax = fig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_subplot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;projection&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(gpx_filename, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;bla:
&lt;&#x2F;span&gt;&lt;span&gt;    gpx = gpxpy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(bla)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;track &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;gpx.tracks:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;track.segments:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;segment.points:
&lt;&#x2F;span&gt;&lt;span&gt;                gps_lat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(point.latitude)
&lt;&#x2F;span&gt;&lt;span&gt;                gps_long.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(point.longitude)
&lt;&#x2F;span&gt;&lt;span&gt;                gps_elevation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(point.elevation)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    N = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(gps_lat)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(N - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span&gt;(gps_long[i:i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;],           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# x coordinate
&lt;&#x2F;span&gt;&lt;span&gt;                gps_lat[i:i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;],            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# y,
&lt;&#x2F;span&gt;&lt;span&gt;                gps_elevation[i:i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;],      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# z
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;=plt.cm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;viridis&lt;&#x2F;span&gt;&lt;span&gt;(i &#x2F; N)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# sequential color
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_xlabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;longitude&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_ylabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;latitude&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_zlabel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;altitude (meters)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;fig,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;animate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view_init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elev&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;azim&lt;&#x2F;span&gt;&lt;span&gt;=i)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;fig,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;anim = animation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FuncAnimation&lt;&#x2F;span&gt;&lt;span&gt;(fig, animate, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init_func&lt;&#x2F;span&gt;&lt;span&gt;=init,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frames&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;360&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;anim.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hike.mp4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fps&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extra_args&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-vcodec&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;libx264&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this codes gives the path of our hike, after about 150 seconds:&lt;&#x2F;p&gt;
&lt;video width=&quot;100%&quot; height=&quot;100%&quot; loop=&quot;True&quot; controls&gt;
  &lt;source src=&quot;hike.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser does not support the HTML5 video tag :(
  click &lt;a href=&quot;hike.mp4&quot;&gt; here &lt;&#x2F;a&gt; to view the animation.
&lt;&#x2F;video&gt;&lt;br&gt;
&lt;p&gt;And that’s pretty cool 😎&lt;&#x2F;p&gt;
&lt;p&gt;Lets extract some more information about this &lt;abbr title=&quot;GPS Exchange Format&quot;&gt;GPX&lt;&#x2F;abbr&gt;
file, in Python:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;gpxpy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;gpx_filename = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hike.gpx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;gpx = gpxpy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(gpx_filename))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length_3d&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_duration&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;started:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_time_bounds&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ended:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,   gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_time_bounds&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;elevation extremes:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_elevation_extremes&lt;&#x2F;span&gt;&lt;span&gt;()[:], &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Max speed: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_moving_data&lt;&#x2F;span&gt;&lt;span&gt;()[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;m&#x2F;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Boundaries: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, [bla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;bla &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_bounds&lt;&#x2F;span&gt;&lt;span&gt;()])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which gives:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python infos.py
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distance:&lt;&#x2F;span&gt;&lt;span&gt; 5892.264830266586 m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5550&lt;&#x2F;span&gt;&lt;span&gt; s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;started:&lt;&#x2F;span&gt;&lt;span&gt; 2018-09-24 07:36:10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ended:&lt;&#x2F;span&gt;&lt;span&gt; 2018-09-24 09:08:40
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elevation&lt;&#x2F;span&gt;&lt;span&gt; extremes: (320.36, 429.36) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Max&lt;&#x2F;span&gt;&lt;span&gt; speed:  1.8713130924592616 m&#x2F;s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Boundaries:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;46.1285393, 46.13805, 5.9561619, 5.9720922&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice! But the nicest thing would be a simple way to add the
&lt;abbr title=&quot;GPS Exchange Format&quot;&gt;GPX&lt;&#x2F;abbr&gt; coordinates on top of the map of
the region. The library &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wrobell&#x2F;geotiler&quot;&gt;geotiler&lt;&#x2F;a&gt;
provides a way to get the map from &lt;a href=&quot;http:&#x2F;&#x2F;openstreetmap.org&#x2F;&quot;&gt;OpenStreetMap&lt;&#x2F;a&gt;.
You might need &lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt; running as server in the background
for &lt;em&gt;geotiler&lt;&#x2F;em&gt; to work. Here’s the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;mpl_toolkits.basemap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Basemap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.patheffects &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;PathEffects
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.patches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Ellipse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;geotiler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;gpxpy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;gpx_filename = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hike.gpx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;gpx = gpxpy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(gpx_filename))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bbox = [gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_bounds&lt;&#x2F;span&gt;&lt;span&gt;().min_longitude - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.002&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_bounds&lt;&#x2F;span&gt;&lt;span&gt;().min_latitude  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.002&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_bounds&lt;&#x2F;span&gt;&lt;span&gt;().max_longitude + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.002&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_bounds&lt;&#x2F;span&gt;&lt;span&gt;().max_latitude  + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.002&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fig = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figure&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;figsize&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;ax = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subplot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# download tiles from OSM
&lt;&#x2F;span&gt;&lt;span&gt;mm = geotiler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extent &lt;&#x2F;span&gt;&lt;span&gt;= bbox, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zoom &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;img = geotiler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render_map&lt;&#x2F;span&gt;&lt;span&gt;(mm)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myMap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Basemap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;llcrnrlon&lt;&#x2F;span&gt;&lt;span&gt;=bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;llcrnrlat&lt;&#x2F;span&gt;&lt;span&gt;=bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urcrnrlon&lt;&#x2F;span&gt;&lt;span&gt;=bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urcrnrlat&lt;&#x2F;span&gt;&lt;span&gt;=bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;projection&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;merc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ax&lt;&#x2F;span&gt;&lt;span&gt;=ax)
&lt;&#x2F;span&gt;&lt;span&gt;myMap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;imshow&lt;&#x2F;span&gt;&lt;span&gt;(img, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interpolation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lanczos&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;origin&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# plot hike
&lt;&#x2F;span&gt;&lt;span&gt;points = gpx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_points_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;lon = [p[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].longitude &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;points]
&lt;&#x2F;span&gt;&lt;span&gt;lat = [p[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].latitude  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;points]
&lt;&#x2F;span&gt;&lt;span&gt;index = [p.point_no &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;points] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# to color sequentially each point
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;x, y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myMap&lt;&#x2F;span&gt;&lt;span&gt;(lon, lat) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# map (long, lat) to (x,y) coordinates in plot
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scatter&lt;&#x2F;span&gt;&lt;span&gt;(x, y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;= index, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmap&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brg&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# add some texts and arrows with style
&lt;&#x2F;span&gt;&lt;span&gt;t1 = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;France&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xy&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.01&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.96&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xycoords&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes fraction&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;horizontalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verticalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontname &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monospace&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;t2 = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Switzerland&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xy&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.99&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.96&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xycoords&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes fraction&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;horizontalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verticalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontname &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monospace&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;el = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ellipse&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;t3 = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Border&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xy&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.61&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.90&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xycoords&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes fraction&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xytext&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.96&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textcoords&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes fraction&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;horizontalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verticalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontname &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monospace&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrowprops&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrowstyle&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fc&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;patchB&lt;&#x2F;span&gt;&lt;span&gt;=el,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectionstyle&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arc3,rad=0.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;t4 = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Switzerland&amp;#39;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;westest point&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xy&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.9559555&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46.1323555&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xytext&lt;&#x2F;span&gt;&lt;span&gt;=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.42&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textcoords&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;axes fraction&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;horizontalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontsize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verticalalignment&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bottom&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fontname &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;monospace&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrowprops&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrowstyle&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fc&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;patchB&lt;&#x2F;span&gt;&lt;span&gt;=el,
&lt;&#x2F;span&gt;&lt;span&gt;                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectionstyle&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arc3,rad=0.3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;[t1, t2, t3, t4]:
&lt;&#x2F;span&gt;&lt;span&gt;    t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_path_effects&lt;&#x2F;span&gt;&lt;span&gt;([PathEffects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;withStroke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linewidth&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foreground&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alpha &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.666&lt;&#x2F;span&gt;&lt;span&gt;)])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;savefig&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;map.png&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quality &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bbox_inches &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tight&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It reads the &lt;abbr title=&quot;GPS Exchange Format&quot;&gt;GPX&lt;&#x2F;abbr&gt; file, gets the map of
the region from OpenStreeMap, adds coloured points showing the path and some
texts. The result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;swissfarwest&#x2F;map.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;swissfarwest&#x2F;map.png&quot; alt=&quot;The coloured points are our hiking path :)&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The blue points mark the beginning of the hike. And it changes colours all the
way to the green points, marking the end of our 5892.3 meters walk :) As you
can see, we got pretty close to the westernmost Swiss point! For
some reason, my phone lost GPS connection in the beginning, that’s why it’s
missing some blue points.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Footnotes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;osm.org&#x2F;go&#x2F;0CFL8Bq5?m=&quot;&gt;Latitude: 46.1323565, Longitude: 5.9559113&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
        <category term="hiking"/>
        
        <category term="analysis"/>
        
        <category term="python"/>
        </entry>
    <entry xml:lang="en">
        <title>Mussum Ipsum</title>
        <published>2018-09-06T00:00:00+00:00</published>
        <updated>2018-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            Diego Esteves
          </name>
        </author>
        
        <author>
          <name>
            Cicero
          </name>
        </author>
        
        <author>
          <name>
            Mussum
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/lorem/"/>
        <id>https://heitorpb.github.io/bla/lorem/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/lorem/">&lt;p&gt;Mussum Ipsum, cacilds vidis litro abertis. Mais vale um bebadis conhecidiss, que um alcoolatra anonimis. Cevadis im ampola pa arma uma pindureta. Suco de cevadiss deixa as pessoas mais interessantis. Paisis, filhis, espiritis santis.&lt;&#x2F;p&gt;
&lt;p&gt;A ordem dos tratores não altera o pão duris. Não sou faixa preta cumpadi, sou preto inteiris, inteiris. Atirei o pau no gatis, per gatis num morreus. Suco de cevadiss, é um leite divinis, qui tem lupuliz, matis, aguis e fermentis.&lt;&#x2F;p&gt;
&lt;p&gt;Viva Forevis aptent taciti sociosqu ad litora torquent. Sapien in monti palavris qui num significa nadis i pareci latim. Delegadis gente finis, bibendum egestas augue arcu ut est. Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.&lt;&#x2F;p&gt;
&lt;p&gt;Em pé sem cair, deitado sem dormir, sentado sem cochilar e fazendo pose. Diuretics paradis num copo é motivis de denguis. Copo furadis é disculpa de bebadis, arcu quam euismod magna. Todo mundo vê os porris que eu tomo, mas ninguém vê os tombis que eu levo!&lt;&#x2F;p&gt;
&lt;p&gt;Interagi no mé, cursus quis, vehicula ac nisi. In elementis mé pra quem é amistosis quis leo. Praesent malesuada urna nisi, quis volutpat erat hendrerit non. Nam vulputate dapibus. Leite de capivaris, leite de mula manquis sem cabeça.&lt;&#x2F;p&gt;
</content>
        
        <category term="test"/>
        
        <category term="random"/>
        </entry>
    <entry xml:lang="en">
        <title>test</title>
        <published>2018-09-05T00:00:00+00:00</published>
        <updated>2018-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Heitor de Bittencourt
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://heitorpb.github.io/bla/test/"/>
        <id>https://heitorpb.github.io/bla/test/</id>
        
        <content type="html" xml:base="https://heitorpb.github.io/bla/test/">&lt;p&gt;this is a &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt; entry&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bla&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for testing tests&lt;&#x2F;p&gt;
&lt;p&gt;This is a python &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt; code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test0 = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;test1 = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ones&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;137&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This a nice
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Higgs_boson#Technical_aspects_and_mathematical_formulation&quot;&gt;Higgs Lagrangian&lt;&#x2F;a&gt;
for testing \( \LaTeX \) :&lt;&#x2F;p&gt;
&lt;div&gt;
$$ \mathcal{L}_H = \left|\left(\partial_\mu -i g W_\mu^a \tau^a -i\frac{1}{2} g&#x27; B_\mu\right)\phi\right|^2 + \mu^2 \phi^\dagger\phi-\lambda (\phi^\dagger\phi)^2 $$
&lt;&#x2F;div&gt;
&lt;p&gt;A pen &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt; for testing a post-it photo:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;heitorpb.github.io&#x2F;bla&#x2F;test&#x2F;test.png&quot; alt=&quot;img test&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Just &lt;code&gt;some Markdown tests&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bold&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;italics&lt;&#x2F;em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;list &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt;&lt;&#x2F;del&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pudim.com.br&quot;&gt;a link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some more &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt; code from Julia &lt;a href=&quot;https:&#x2F;&#x2F;qojulia.org&#x2F;&quot;&gt;Quantum Optics&lt;&#x2F;a&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-julia &quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span&gt; QuantumOptics
&lt;&#x2F;span&gt;&lt;span&gt;b = FockBasis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;a = destroy(b)
&lt;&#x2F;span&gt;&lt;span&gt;at = create(b)
&lt;&#x2F;span&gt;&lt;span&gt;H = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;*(a^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;+ at^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;psi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= fockstate(b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;tout, psit = timeevolution.schroedinger([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.25&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;], psi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, H)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span&gt; PyPlot
&lt;&#x2F;span&gt;&lt;span&gt;x = [-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;    subplot(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, i)
&lt;&#x2F;span&gt;&lt;span&gt;    Q = qfunc(psit[i], x, x)
&lt;&#x2F;span&gt;&lt;span&gt;    pcolor(x, x, Q)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;tight_layout()
&lt;&#x2F;span&gt;&lt;span&gt;savefig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fock.png&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unicode&#x2F;Emoji &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt;:&lt;&#x2F;p&gt;
&lt;center&gt;
🦕&lt;br&gt;
🦖  🐦&lt;br&gt;
🐉  🔥  🐙&lt;br&gt;
🦑  🐈  🐾  🐢&lt;br&gt;
🐞  🦋  🐌&lt;br&gt;
🧪  🧬&lt;br&gt;
🧬
&lt;&#x2F;center&gt;
&lt;p&gt;Twemoji &lt;abbr title=&quot;test!&quot;&gt;test&lt;&#x2F;abbr&gt;: 👍 🎃 😮 😛 😱&lt;&#x2F;p&gt;
&lt;p&gt;It works!&lt;&#x2F;p&gt;
&lt;p&gt;It works?&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;blockquote&quot;&gt;
&lt;p markdown=&quot;1&quot;&gt;This is a reminder for me in the future: _it **is possible** to have_
`markdown` inside `HTML` code blocks!!&lt;&#x2F;p&gt;
&lt;footer class=&quot;blockquote-footer&quot;&gt;Me, in the past.&lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Footnotes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#bla&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: Bla &lt;a href=&quot;https:&#x2F;&#x2F;lmgtfy.com&#x2F;?q=bla&quot;&gt;blablabla&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
        <category term="test"/>
        
        <category term="random"/>
        </entry>
</feed>
